// eslint-disable-next-line eslint-comments/disable-enable-pair
/* eslint-disable eslint-comments/no-unlimited-disable */
/* eslint-disable eslint-comments/disable-enable-pair */
/* tslint:disable */
/* eslint-disable */
/**
 * v1 Farcaster
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { ErrorRes } from "../models";
// @ts-ignore
import { GetUserInformationByFid200Response } from "../models";
// @ts-ignore
import { RecentUsersResponse } from "../models";
// @ts-ignore
import { UserCastLikeResponse } from "../models";
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Fetch all the liked cast of a User
     * @summary Get User Cast Likes
     * @param {number} fid FID of the user
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {number} [limit] Number of results to retrieve (default 25, max 150)
     * @param {string} [cursor] Pagination cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserCastLikes: async (
      fid: number,
      viewerFid?: number,
      limit?: number,
      cursor?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'fid' is not null or undefined
      assertParamExists("getUserCastLikes", "fid", fid);
      const localVarPath = `/farcaster/user-cast-likes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "api_key",
        configuration
      );

      if (fid !== undefined) {
        localVarQueryParameter["fid"] = fid;
      }

      if (viewerFid !== undefined) {
        localVarQueryParameter["viewerFid"] = viewerFid;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      if (cursor !== undefined) {
        localVarQueryParameter["cursor"] = cursor;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Returns metadata about a specific user
     * @summary Get User Information by FID
     * @param {number} fid fid of a user
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserInformationByFid: async (
      fid: number,
      viewerFid?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'fid' is not null or undefined
      assertParamExists("getUserInformationByFid", "fid", fid);
      const localVarPath = `/farcaster/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "api_key",
        configuration
      );

      if (fid !== undefined) {
        localVarQueryParameter["fid"] = fid;
      }

      if (viewerFid !== undefined) {
        localVarQueryParameter["viewerFid"] = viewerFid;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Returns metadata about a specific user
     * @summary Get User Information by username
     * @param {string} username Username of the user
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserInformationByUsername: async (
      username: string,
      viewerFid?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'username' is not null or undefined
      assertParamExists("getUserInformationByUsername", "username", username);
      const localVarPath = `/farcaster/user-by-username`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "api_key",
        configuration
      );

      if (username !== undefined) {
        localVarQueryParameter["username"] = username;
      }

      if (viewerFid !== undefined) {
        localVarQueryParameter["viewerFid"] = viewerFid;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Fetch all Recent Users
     * @summary Get Recent Users
     * @param {number} [viewerFid] Viewer\&#39;s User identifier.
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Limit for number of users returned (between 100 and 1000).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recentUsers: async (
      viewerFid?: number,
      cursor?: string,
      limit?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/farcaster/recent-users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "api_key",
        configuration
      );

      if (viewerFid !== undefined) {
        localVarQueryParameter["viewerFid"] = viewerFid;
      }

      if (cursor !== undefined) {
        localVarQueryParameter["cursor"] = cursor;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     * Fetch all the liked cast of a User
     * @summary Get User Cast Likes
     * @param {number} fid FID of the user
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {number} [limit] Number of results to retrieve (default 25, max 150)
     * @param {string} [cursor] Pagination cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserCastLikes(
      fid: number,
      viewerFid?: number,
      limit?: number,
      cursor?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UserCastLikeResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserCastLikes(
          fid,
          viewerFid,
          limit,
          cursor,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Returns metadata about a specific user
     * @summary Get User Information by FID
     * @param {number} fid fid of a user
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserInformationByFid(
      fid: number,
      viewerFid?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetUserInformationByFid200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserInformationByFid(
          fid,
          viewerFid,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Returns metadata about a specific user
     * @summary Get User Information by username
     * @param {string} username Username of the user
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserInformationByUsername(
      username: string,
      viewerFid?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetUserInformationByFid200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserInformationByUsername(
          username,
          viewerFid,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Fetch all Recent Users
     * @summary Get Recent Users
     * @param {number} [viewerFid] Viewer\&#39;s User identifier.
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Limit for number of users returned (between 100 and 1000).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async recentUsers(
      viewerFid?: number,
      cursor?: string,
      limit?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<RecentUsersResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.recentUsers(
        viewerFid,
        cursor,
        limit,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     * Fetch all the liked cast of a User
     * @summary Get User Cast Likes
     * @param {number} fid FID of the user
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {number} [limit] Number of results to retrieve (default 25, max 150)
     * @param {string} [cursor] Pagination cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserCastLikes(
      fid: number,
      viewerFid?: number,
      limit?: number,
      cursor?: string,
      options?: any
    ): AxiosPromise<UserCastLikeResponse> {
      return localVarFp
        .getUserCastLikes(fid, viewerFid, limit, cursor, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Returns metadata about a specific user
     * @summary Get User Information by FID
     * @param {number} fid fid of a user
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserInformationByFid(
      fid: number,
      viewerFid?: number,
      options?: any
    ): AxiosPromise<GetUserInformationByFid200Response> {
      return localVarFp
        .getUserInformationByFid(fid, viewerFid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Returns metadata about a specific user
     * @summary Get User Information by username
     * @param {string} username Username of the user
     * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserInformationByUsername(
      username: string,
      viewerFid?: number,
      options?: any
    ): AxiosPromise<GetUserInformationByFid200Response> {
      return localVarFp
        .getUserInformationByUsername(username, viewerFid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Fetch all Recent Users
     * @summary Get Recent Users
     * @param {number} [viewerFid] Viewer\&#39;s User identifier.
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Limit for number of users returned (between 100 and 1000).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recentUsers(
      viewerFid?: number,
      cursor?: string,
      limit?: number,
      options?: any
    ): AxiosPromise<RecentUsersResponse> {
      return localVarFp
        .recentUsers(viewerFid, cursor, limit, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   * Fetch all the liked cast of a User
   * @summary Get User Cast Likes
   * @param {number} fid FID of the user
   * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
   * @param {number} [limit] Number of results to retrieve (default 25, max 150)
   * @param {string} [cursor] Pagination cursor
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserCastLikes(
    fid: number,
    viewerFid?: number,
    limit?: number,
    cursor?: string,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .getUserCastLikes(fid, viewerFid, limit, cursor, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Returns metadata about a specific user
   * @summary Get User Information by FID
   * @param {number} fid fid of a user
   * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserInformationByFid(
    fid: number,
    viewerFid?: number,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .getUserInformationByFid(fid, viewerFid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Returns metadata about a specific user
   * @summary Get User Information by username
   * @param {string} username Username of the user
   * @param {number} [viewerFid] fid of the user viewing this information, needed for contextual information.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserInformationByUsername(
    username: string,
    viewerFid?: number,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .getUserInformationByUsername(username, viewerFid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Fetch all Recent Users
   * @summary Get Recent Users
   * @param {number} [viewerFid] Viewer\&#39;s User identifier.
   * @param {string} [cursor] Pagination cursor.
   * @param {number} [limit] Limit for number of users returned (between 100 and 1000).
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public recentUsers(
    viewerFid?: number,
    cursor?: string,
    limit?: number,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .recentUsers(viewerFid, cursor, limit, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
