/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = T | U extends object
  ? (Without<T, U> & U) | (Without<U, T> & T)
  : T | U;
type OneOf<T extends any[]> = T extends [infer Only]
  ? Only
  : T extends [infer A, infer B, ...infer Rest]
  ? OneOf<[XOR<A, B>, ...Rest]>
  : never;

export interface paths {
  "/farcaster/user": {
    /**
     * Get User Information by FID
     * @description Returns metadata about a specific user
     */
    get: operations["user"];
  };
  "/farcaster/user-by-username": {
    /**
     * Get User Information by username
     * @description Returns metadata about a specific user
     */
    get: operations["user-by-username"];
  };
  "/farcaster/user-cast-likes": {
    /**
     * Get User Cast Likes
     * @description Fetch all the liked cast of a User
     */
    get: operations["user-cast-likes"];
  };
  "/farcaster/recent-users": {
    /**
     * Get Recent Users
     * @description Get a list of casts from the protocol in reverse chronological order based on timestamp
     */
    get: operations["recent-users"];
  };
  "/farcaster/custody-address": {
    /**
     * Get the custody address for a given FID
     * @description Returns the custody address for a given FID
     */
    get: operations["custody-address"];
  };
  "/farcaster/cast": {
    /**
     * Retrieve cast for a given hash
     * @description Gets information about an individual cast
     */
    get: operations["cast"];
  };
  "/farcaster/all-casts-in-thread": {
    /**
     * Retrieve all casts in a given thread hash
     * @description Gets the most recent casts for a user in reverse-chronological order
     */
    get: operations["all-casts-in-thread"];
  };
  "/farcaster/casts": {
    /**
     * Retrieve casts for a given user
     * @description Gets the most recent casts for a user
     */
    get: operations["casts"];
  };
  "/farcaster/recent-casts": {
    /**
     * Get Recent Casts
     * @description Get a list of casts from the protocol in reverse chronological order based on timestamp
     */
    get: operations["recent-casts"];
  };
  "/farcaster/verifications": {
    /**
     * Retrieve verifications for a given FID
     * @description Get all known verifications of a user
     */
    get: operations["verifications"];
  };
  "/farcaster/user-by-verification": {
    /**
     * Retrieve user for a given ethereum address
     * @description Checks if a given Ethereum address has a Farcaster user associated with it. Note: if an address is associated with multiple users, the API will return the user who most recently published a verification with the address (based on when Warpcast received the proof, not a self-reported timestamp).
     */
    get: operations["user-by-verification"];
  };
  "/farcaster/mentions-and-replies": {
    /**
     * Get mentions and replies
     * @description Gets a list of mentions and replies to the user’s casts in reverse chronological order
     */
    get: operations["mentions-and-replies"];
  };
  "/farcaster/reactions-and-recasts": {
    /**
     * Get reactions and recasts
     * @description Get a list of reactions and recasts to the users’s casts in reverse chronological order
     */
    get: operations["reactions-and-recasts"];
  };
  "/farcaster/cast-likes": {
    /**
     * Get all like reactions for a specific cast
     * @description Get all like reactions for a specific cast in reverse chronological order.
     */
    get: operations["cast-likes"];
  };
  "/farcaster/cast-reactions": {
    /**
     * Get all reactions for a specific cast
     * @description Get all reactions (likes and recasts) for a specific cast.
     */
    get: operations["cast-reactions"];
  };
  "/farcaster/cast-recasters": {
    /**
     * Get all recasters for a specific cast
     * @description Get all recasters for a specific cast.
     */
    get: operations["cast-recasters"];
  };
  "/farcaster/followers": {
    /**
     * Gets all followers for a given FID
     * @description Gets a list of users who follow a given user in reverse chronological order.
     */
    get: operations["followers"];
  };
  "/farcaster/following": {
    /**
     * Gets all following users of a FID
     * @description Gets a list of users who is following a given user in reverse chronological order.
     */
    get: operations["following"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ViewerContext: {
      following: boolean;
      followedBy: boolean;
      liked?: boolean;
      recasted?: boolean;
    };
    /**
     * Format: int32
     * @description User identifier (unsigned integer)
     * @default 3
     */
    Fid: number;
    /**
     * @description The status of a user.
     *   - active: The user is currently active.
     *   - inactive: The user is not currently active.
     *
     * @enum {string}
     */
    ActiveStatus: "active" | "inactive";
    /**
     * @description The reaction type of a cast.
     *   - like: Cast is being liked by a user.
     *   - recast: Cast is being recasted by a user.
     *
     * @enum {string}
     */
    ReactionType: "like" | "recast";
    /**
     * @description The notification type of a cast.
     *
     * @enum {string}
     */
    CastType: "cast-mention" | "cast-reply";
    /**
     * @description Ethereum address
     * @default 0x5A927Ac639636E534b678e81768CA19e2C6280B7
     */
    Address: string;
    /** Format: date-time */
    Timestamp: string;
    /** @description Returns ErrorRes metadata */
    ErrorRes: {
      code?: string;
      message: string;
      property?: string;
    };
    User: {
      fid: components["schemas"]["Fid"];
      /** @description The username of the user. */
      username: string;
      /** @description The display of the reactor. */
      displayName: string;
      pfp: {
        /** @description The URL of the user's profile picture. */
        url: string;
      };
      profile: {
        bio: {
          text: string;
          mentions: string[];
        };
      };
      /**
       * Format: int32
       * @description The number of followers the user has.
       */
      followerCount: number;
      /**
       * Format: int32
       * @description The number of users the user is following.
       */
      followingCount: number;
      verifications: components["schemas"]["Address"][];
      activeStatus: components["schemas"]["ActiveStatus"];
      viewerContext?: components["schemas"]["ViewerContext"];
    };
    Reactor: {
      /**
       * Format: int32
       * @description The unique identifier of the reactor.
       */
      fid: number;
      /** @description The username of the reactor. */
      username: string;
      /** @description The display name of the reactor. */
      displayName: string;
      pfp: {
        /** @description The URL of the reactor's profile picture. */
        url: string;
      };
      /**
       * Format: int32
       * @description The number of followers the reactor has.
       */
      followerCount: number;
      /**
       * Format: int32
       * @description The number of users the reactor is following.
       */
      followingCount: number;
      viewerContext?: {
        /** @description Indicates if the viewer is following the reactor. */
        following: boolean;
        /** @description Indicates if the reactor is followed by the viewer. */
        followedBy: boolean;
      };
    };
    Recaster: {
      /**
       * Format: int32
       * @description The unique identifier of the recaster.
       */
      fid: number;
      /** @description The username of the recaster. */
      username: string;
      /** @description The display name of the recaster. */
      displayName: string;
      pfp: {
        /** @description The URL of the recaster's profile picture. */
        url: string;
      };
      profile: {
        bio: {
          text: string;
          mentions: string[];
        };
      };
      /**
       * Format: int32
       * @description The number of followers the recaster has.
       */
      followerCount: number;
      /**
       * Format: int32
       * @description The number of users the recaster is following.
       */
      followingCount: number;
      timestamp: components["schemas"]["Timestamp"];
      viewerContext?: {
        /** @description Indicates if the viewer is following the recaster. */
        following: boolean;
        /** @description Indicates if the recaster is followed by the viewer. */
        followedBy: boolean;
      };
    };
    EmbedUrl: {
      url: string;
    };
    /** @description Reaction of a user (either like or recast), along with its associated cast */
    ReactionWithCastMeta: {
      reaction: {
        reactor_fid: components["schemas"]["Fid"];
        reaction_type: components["schemas"]["ReactionType"];
        reaction_hash: string;
        reaction_target_hash: string;
        /** Format: date-time */
        reaction_timestamp: string;
      };
      cast?: {
        cast_fid: components["schemas"]["Fid"];
        cast_hash: string;
        cast_text: string;
        cast_embeds: components["schemas"]["EmbedUrl"][];
        /** Format: date-time */
        cast_timestamp: string;
      };
      cast_author?: components["schemas"]["User"];
    };
    Reaction: {
      type: components["schemas"]["ReactionType"];
      hash: components["schemas"]["Address"];
      reactor: components["schemas"]["Reactor"];
      timestamp: components["schemas"]["Timestamp"];
      castHash: components["schemas"]["Address"];
    };
    Cast: {
      hash: string;
      parentHash: string | null;
      parentUrl: string | null;
      parentAuthor: components["schemas"]["Fid"] & {
        fid: string | null;
      };
      author: OneOf<
        [
          components["schemas"]["User"],
          {
            fid: string;
          }
        ]
      >;
      text: string;
      timestamp: components["schemas"]["Timestamp"];
      embeds: components["schemas"]["EmbedUrl"][];
      type?: components["schemas"]["CastType"];
    };
    CastWithInteractionsReactionsOrRecasts: {
      /** Format: int32 */
      count: number;
      fids: components["schemas"]["Fid"][];
    };
    CastWithInteractionsReplies: {
      /** Format: int32 */
      count: number;
    };
    CastWithInteractions: components["schemas"]["Cast"] & {
      reactions: components["schemas"]["CastWithInteractionsReactionsOrRecasts"];
      recasts: components["schemas"]["CastWithInteractionsReactionsOrRecasts"];
      recasters: string[];
      viewerContext?: components["schemas"]["ViewerContext"];
      replies: components["schemas"]["CastWithInteractionsReplies"];
      threadHash: string | null;
    };
    /** @description Returns next cursor */
    NextCursor: {
      cursor: string | null;
    };
    ReactionsAndRecastsNotification: components["schemas"]["Cast"] & {
      reactors?: components["schemas"]["User"][];
      reactionType?: components["schemas"]["ReactionType"];
    };
    UserCastLikeResponse: {
      result: {
        reactor: components["schemas"]["User"];
        likes: components["schemas"]["ReactionWithCastMeta"][];
        next: components["schemas"]["NextCursor"];
      };
    };
    RecentUsersResponse: {
      result: {
        users: components["schemas"]["User"][];
        next: components["schemas"]["NextCursor"];
      };
    };
    CastResponse: {
      result: {
        cast: components["schemas"]["CastWithInteractions"];
      };
    };
    AllCastsInThreadResponse: {
      result: {
        casts: components["schemas"]["CastWithInteractions"][];
      };
    };
    CastsResponse: {
      result: {
        casts: components["schemas"]["CastWithInteractions"][];
        next: components["schemas"]["NextCursor"];
      };
    };
    RecentCastsResponse: {
      result: {
        casts: components["schemas"]["CastWithInteractions"][];
        next: components["schemas"]["NextCursor"];
      };
    };
    VerificationResponse: {
      result: {
        fid: string;
        username: string;
        display_name: string;
        verifications: string[];
      };
    };
    MentionsAndRepliesResponse: {
      result: {
        notifications: components["schemas"]["CastWithInteractions"][];
        next: components["schemas"]["NextCursor"];
      };
    };
    ReactionsAndRecastsResponse: {
      result: {
        notifications: components["schemas"]["ReactionsAndRecastsNotification"][];
        next: components["schemas"]["NextCursor"];
      };
    };
    CustodyAddressResponse: {
      result: {
        fid: components["schemas"]["Fid"];
        custodyAddress: string | null;
      };
    };
    CastLikesResponse: {
      result: {
        likes: components["schemas"]["Reaction"][];
        next: components["schemas"]["NextCursor"];
      };
    };
    CastReactionsResponse: {
      result: {
        casts: components["schemas"]["Reaction"][];
        next: components["schemas"]["NextCursor"];
      };
    };
    CastRecasterResponse: {
      result: {
        users: components["schemas"]["Recaster"][];
        next: components["schemas"]["NextCursor"];
      };
    };
    FollowResponse: {
      result: {
        users: components["schemas"]["User"][];
      };
    };
  };
  responses: {
    /** @description Successful operation. */
    UserSuccess: {
      content: {
        "application/json": {
          result: {
            user: components["schemas"]["User"];
          };
        };
      };
    };
    /** @description Resource not found */
    "404Response": {
      content: {
        "application/json": components["schemas"]["ErrorRes"];
      };
    };
    /** @description Bad Request */
    "400Response": {
      content: {
        "application/json": components["schemas"]["ErrorRes"];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * Get User Information by FID
   * @description Returns metadata about a specific user
   */
  user: {
    parameters: {
      query: {
        /** @description fid of a user */
        fid: components["schemas"]["Fid"];
        /** @description fid of the user viewing this information, needed for contextual information. */
        viewerFid?: components["schemas"]["Fid"];
      };
    };
    responses: {
      200: components["responses"]["UserSuccess"];
      400: components["responses"]["400Response"];
      404: components["responses"]["404Response"];
    };
  };
  /**
   * Get User Information by username
   * @description Returns metadata about a specific user
   */
  "user-by-username": {
    parameters: {
      query: {
        /** @description Username of the user */
        username: string;
        /** @description fid of the user viewing this information, needed for contextual information. */
        viewerFid?: components["schemas"]["Fid"];
      };
    };
    responses: {
      200: components["responses"]["UserSuccess"];
      400: components["responses"]["400Response"];
      404: components["responses"]["404Response"];
    };
  };
  /**
   * Get User Cast Likes
   * @description Fetch all the liked cast of a User
   */
  "user-cast-likes": {
    parameters: {
      query: {
        /** @description FID of the user */
        fid: components["schemas"]["Fid"];
        /** @description fid of the user viewing this information, needed for contextual information. */
        viewerFid?: components["schemas"]["Fid"];
        /** @description Number of results to retrieve (default 25, max 150) */
        limit?: number;
        /** @description Pagination cursor */
        cursor?: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["UserCastLikeResponse"];
        };
      };
      400: components["responses"]["400Response"];
    };
  };
  /**
   * Get Recent Users
   * @description Get a list of casts from the protocol in reverse chronological order based on timestamp
   */
  "recent-users": {
    parameters: {
      query?: {
        /** @description fid of the user viewing this information, needed for contextual information. */
        viewerFid?: components["schemas"]["Fid"];
        /** @description Pagination cursor. */
        cursor?: string;
        /** @description Number of results to retrieve (default 100, max 1000) */
        limit?: number;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["RecentUsersResponse"];
        };
      };
      400: components["responses"]["400Response"];
    };
  };
  /**
   * Get the custody address for a given FID
   * @description Returns the custody address for a given FID
   */
  "custody-address": {
    parameters: {
      query: {
        /** @description fid of a user */
        fid: components["schemas"]["Fid"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["CustodyAddressResponse"];
        };
      };
      400: components["responses"]["400Response"];
    };
  };
  /**
   * Retrieve cast for a given hash
   * @description Gets information about an individual cast
   */
  cast: {
    parameters: {
      query: {
        /**
         * @description Cast hash
         * @example 0xfe90f9de682273e05b201629ad2338bdcd89b6be
         */
        hash: components["schemas"]["Address"];
        /** @description fid of the user viewing this information, needed for contextual information. */
        viewerFid?: components["schemas"]["Fid"];
      };
    };
    responses: {
      /** @description Successful operation. */
      200: {
        content: {
          "application/json": components["schemas"]["CastResponse"];
        };
      };
      400: components["responses"]["400Response"];
    };
  };
  /**
   * Retrieve all casts in a given thread hash
   * @description Gets the most recent casts for a user in reverse-chronological order
   */
  "all-casts-in-thread": {
    parameters: {
      query: {
        /**
         * @description The hash of the thread to retrieve casts from.
         * @example 0xfe90f9de682273e05b201629ad2338bdcd89b6be
         */
        threadHash: components["schemas"]["Address"];
        /** @description fid of the user viewing this information, needed for contextual information. */
        viewerFid?: components["schemas"]["Fid"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["AllCastsInThreadResponse"];
        };
      };
    };
  };
  /**
   * Retrieve casts for a given user
   * @description Gets the most recent casts for a user
   */
  casts: {
    parameters: {
      query: {
        /** @description fid of a user */
        fid: components["schemas"]["Fid"];
        /** @description fid of the user viewing this information, needed for contextual information. */
        viewerFid?: components["schemas"]["Fid"];
        /**
         * @description A cast can be part of a certain channel. The channel is identified by `parent_url`. All casts in the channel ladder up to the same parent_url.
         * @example https://ethereum.org
         */
        parent_url?: string;
        /** @description Pagination cursor. */
        cursor?: string;
        /** @description Number of results to retrieve (default 25, max 150) */
        limit?: number;
      };
    };
    responses: {
      /** @description Successful operation. */
      200: {
        content: {
          "application/json": components["schemas"]["CastsResponse"];
        };
      };
      400: components["responses"]["400Response"];
    };
  };
  /**
   * Get Recent Casts
   * @description Get a list of casts from the protocol in reverse chronological order based on timestamp
   */
  "recent-casts": {
    parameters: {
      query?: {
        /** @description fid of the user viewing this information, needed for contextual information. */
        viewerFid?: components["schemas"]["Fid"];
        /** @description Pagination cursor. */
        cursor?: string;
        /** @description Number of results to retrieve (default 25, max 100) */
        limit?: number;
      };
    };
    responses: {
      /** @description Successful operation. */
      200: {
        content: {
          "application/json": components["schemas"]["RecentCastsResponse"];
        };
      };
      400: components["responses"]["400Response"];
    };
  };
  /**
   * Retrieve verifications for a given FID
   * @description Get all known verifications of a user
   */
  verifications: {
    parameters: {
      query: {
        /** @description FID of the user */
        fid: components["schemas"]["Fid"];
      };
    };
    responses: {
      /** @description Profile details and verifications for the given FID. */
      200: {
        content: {
          "application/json": components["schemas"]["VerificationResponse"];
        };
      };
      400: components["responses"]["400Response"];
    };
  };
  /**
   * Retrieve user for a given ethereum address
   * @description Checks if a given Ethereum address has a Farcaster user associated with it. Note: if an address is associated with multiple users, the API will return the user who most recently published a verification with the address (based on when Warpcast received the proof, not a self-reported timestamp).
   */
  "user-by-verification": {
    parameters: {
      query: {
        address: components["schemas"]["Address"];
      };
    };
    responses: {
      200: components["responses"]["UserSuccess"];
      400: components["responses"]["400Response"];
    };
  };
  /**
   * Get mentions and replies
   * @description Gets a list of mentions and replies to the user’s casts in reverse chronological order
   */
  "mentions-and-replies": {
    parameters: {
      query: {
        /** @description fid of a user */
        fid: components["schemas"]["Fid"];
        /** @description fid of the user viewing this information, needed for contextual information. */
        viewerFid?: components["schemas"]["Fid"];
        /** @description Pagination cursor. */
        cursor?: string;
        /** @description Number of results to retrieve (default 25, max 150) */
        limit?: number;
      };
    };
    responses: {
      /** @description Successful operation. */
      200: {
        content: {
          "application/json": components["schemas"]["MentionsAndRepliesResponse"];
        };
      };
      400: components["responses"]["400Response"];
    };
  };
  /**
   * Get reactions and recasts
   * @description Get a list of reactions and recasts to the users’s casts in reverse chronological order
   */
  "reactions-and-recasts": {
    parameters: {
      query: {
        /**
         * @description fid of a user
         * @example 6131
         */
        fid: components["schemas"]["Fid"];
        /**
         * @description fid of the user viewing this information, needed for contextual information.
         * @example 3
         */
        viewerFid?: components["schemas"]["Fid"];
        /** @description Pagination cursor. */
        cursor?: string;
        /** @description Number of results to retrieve (default 25, max 150) */
        limit?: number;
      };
    };
    responses: {
      /** @description Successful operation. */
      200: {
        content: {
          "application/json": components["schemas"]["ReactionsAndRecastsResponse"];
        };
      };
      400: components["responses"]["400Response"];
    };
  };
  /**
   * Get all like reactions for a specific cast
   * @description Get all like reactions for a specific cast in reverse chronological order.
   */
  "cast-likes": {
    parameters: {
      query: {
        /**
         * @description Cast hash
         * @example 0xfe90f9de682273e05b201629ad2338bdcd89b6be
         */
        castHash: components["schemas"]["Address"];
        /** @description fid of the user viewing this information, needed for contextual information. */
        viewerFid?: components["schemas"]["Fid"];
        /** @description Pagination cursor. */
        cursor?: string;
        /** @description Number of results to retrieve (default 25, max 150) */
        limit?: number;
      };
    };
    responses: {
      /** @description Successful operation. */
      200: {
        content: {
          "application/json": components["schemas"]["CastLikesResponse"];
        };
      };
      400: components["responses"]["400Response"];
    };
  };
  /**
   * Get all reactions for a specific cast
   * @description Get all reactions (likes and recasts) for a specific cast.
   */
  "cast-reactions": {
    parameters: {
      query: {
        /**
         * @description Cast hash
         * @example 0xfe90f9de682273e05b201629ad2338bdcd89b6be
         */
        castHash: components["schemas"]["Address"];
        /** @description fid of the user viewing this information, needed for contextual information. */
        viewerFid?: components["schemas"]["Fid"];
        /** @description Pagination cursor. */
        cursor?: string;
        /** @description Number of results to retrieve (default 25, max 150) */
        limit?: number;
      };
    };
    responses: {
      /** @description Successful operation. */
      200: {
        content: {
          "application/json": components["schemas"]["CastReactionsResponse"];
        };
      };
      400: components["responses"]["400Response"];
    };
  };
  /**
   * Get all recasters for a specific cast
   * @description Get all recasters for a specific cast.
   */
  "cast-recasters": {
    parameters: {
      query: {
        /**
         * @description Cast hash
         * @example 0xfe90f9de682273e05b201629ad2338bdcd89b6be
         */
        castHash: components["schemas"]["Address"];
        /** @description fid of the user viewing this information, needed for contextual information. */
        viewerFid?: components["schemas"]["Fid"];
        /** @description Pagination cursor. */
        cursor?: string;
        /** @description Number of results to retrieve (default 25, max 150) */
        limit?: number;
      };
    };
    responses: {
      /** @description Successful operation. */
      200: {
        content: {
          "application/json": components["schemas"]["CastRecasterResponse"];
        };
      };
      400: components["responses"]["400Response"];
    };
  };
  /**
   * Gets all followers for a given FID
   * @description Gets a list of users who follow a given user in reverse chronological order.
   */
  followers: {
    parameters: {
      query: {
        /**
         * @description FID of the user
         * @example 6131
         */
        fid: components["schemas"]["Fid"];
        /**
         * @description fid of the user viewing this information, needed for contextual information.
         * @example 194
         */
        viewerFid?: components["schemas"]["Fid"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["FollowResponse"];
        };
      };
      400: components["responses"]["400Response"];
    };
  };
  /**
   * Gets all following users of a FID
   * @description Gets a list of users who is following a given user in reverse chronological order.
   */
  following: {
    parameters: {
      query: {
        /**
         * @description FID of the user
         * @example 6131
         */
        fid: components["schemas"]["Fid"];
        /**
         * @description fid of the user viewing this information, needed for contextual information.
         * @example 194
         */
        viewerFid?: components["schemas"]["Fid"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["FollowResponse"];
        };
      };
      400: components["responses"]["400Response"];
    };
  };
}
