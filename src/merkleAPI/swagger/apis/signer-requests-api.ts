/* tslint:disable */
/* eslint-disable */
/**
 * Merkle API
 * API documentation for all publicly exposed APIs provided by Merkle Manufactory, Inc for Farcaster V2.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "../base";
// @ts-ignore
import { V2SignerRequestGet200Response } from "../models";
// @ts-ignore
import { V2SignerRequestsPost200Response } from "../models";
// @ts-ignore
import { V2SignerRequestsPostRequest } from "../models";
/**
 * SignerRequestsApi - axios parameter creator
 * @export
 */
export const SignerRequestsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * Gets information about a Signer Request. This URL can be polled to check if a user has completed the Signer Request flow.
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2SignerRequestGet: async (
      token: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'token' is not null or undefined
      assertParamExists("v2SignerRequestGet", "token", token);
      const localVarPath = `/v2/signer-request`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (token !== undefined) {
        localVarQueryParameter["token"] = token;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates a signer request used to initiate a signer request flow for a user in Warpcast. A Signer Request expires in 24 hours.
     * @param {V2SignerRequestsPostRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2SignerRequestsPost: async (
      body?: V2SignerRequestsPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/v2/signer-requests`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SignerRequestsApi - functional programming interface
 * @export
 */
export const SignerRequestsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    SignerRequestsApiAxiosParamCreator(configuration);
  return {
    /**
     * Gets information about a Signer Request. This URL can be polled to check if a user has completed the Signer Request flow.
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2SignerRequestGet(
      token: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<V2SignerRequestGet200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v2SignerRequestGet(token, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Creates a signer request used to initiate a signer request flow for a user in Warpcast. A Signer Request expires in 24 hours.
     * @param {V2SignerRequestsPostRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2SignerRequestsPost(
      body?: V2SignerRequestsPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<V2SignerRequestsPost200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.v2SignerRequestsPost(body, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * SignerRequestsApi - factory interface
 * @export
 */
export const SignerRequestsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SignerRequestsApiFp(configuration);
  return {
    /**
     * Gets information about a Signer Request. This URL can be polled to check if a user has completed the Signer Request flow.
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2SignerRequestGet(
      token: string,
      options?: any
    ): AxiosPromise<V2SignerRequestGet200Response> {
      return localVarFp
        .v2SignerRequestGet(token, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates a signer request used to initiate a signer request flow for a user in Warpcast. A Signer Request expires in 24 hours.
     * @param {V2SignerRequestsPostRequest} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2SignerRequestsPost(
      body?: V2SignerRequestsPostRequest,
      options?: any
    ): AxiosPromise<V2SignerRequestsPost200Response> {
      return localVarFp
        .v2SignerRequestsPost(body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SignerRequestsApi - object-oriented interface
 * @export
 * @class SignerRequestsApi
 * @extends {BaseAPI}
 */
export class SignerRequestsApi extends BaseAPI {
  /**
   * Gets information about a Signer Request. This URL can be polled to check if a user has completed the Signer Request flow.
   * @param {string} token
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignerRequestsApi
   */
  public v2SignerRequestGet(token: string, options?: AxiosRequestConfig) {
    return SignerRequestsApiFp(this.configuration)
      .v2SignerRequestGet(token, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Creates a signer request used to initiate a signer request flow for a user in Warpcast. A Signer Request expires in 24 hours.
   * @param {V2SignerRequestsPostRequest} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SignerRequestsApi
   */
  public v2SignerRequestsPost(
    body?: V2SignerRequestsPostRequest,
    options?: AxiosRequestConfig
  ) {
    return SignerRequestsApiFp(this.configuration)
      .v2SignerRequestsPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
