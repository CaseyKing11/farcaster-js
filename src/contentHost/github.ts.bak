import { Directory } from 'farcaster/api';
import { ContentHost, FarcasterGuardianContentHost, SignedPost } from '.';
import axios, { AxiosInstance, AxiosRequestConfig } from 'axios';

export interface Gist {
    url:          string;
    forks_url:    string;
    commits_url:  string;
    id:           string;
    node_id:      string;
    git_pull_url: string;
    git_push_url: string;
    html_url:     string;
    files:        GistFiles;
    public:       boolean;
    created_at:   Date;
    updated_at:   Date;
    description:  string;
    comments:     number;
    user:         null;
    comments_url: string;
    owner:        Owner;
    truncated:    boolean;
}

export interface GistFiles {
    [filename: string]: GistFile;
}

export interface GistFile {
    filename: string;
    type:     string;
    language: string;
    raw_url:  string;
    size:     number;
}

export interface Owner {
    login:               string;
    id:                  number;
    node_id:             string;
    avatar_url:          string;
    gravatar_id:         string;
    url:                 string;
    html_url:            string;
    followers_url:       string;
    following_url:       string;
    gists_url:           string;
    starred_url:         string;
    subscriptions_url:   string;
    organizations_url:   string;
    repos_url:           string;
    events_url:          string;
    received_events_url: string;
    type:                string;
    site_admin:          boolean;
}


export class GithubGistContentHost implements ContentHost {
    private axiosInstance: AxiosInstance;

    static readonly GIST_DESCRIPTION = 'Farcaster Self-Hosting Data';

    constructor(private personalAccessToken: string, axiosInstance?: AxiosInstance) {
        if (!axiosInstance) {
            axiosInstance = axios.create({
              baseURL: `https://api.github.com`,
              validateStatus: (status) => status >= 200 && status < 300,
            });
        }
        this.axiosInstance = axiosInstance;
        this.axiosInstance.interceptors.request.use(
          this._axiosInterceptor.bind(this)
        );
    }

    async publishPost(post: SignedPost): Promise<void> {
        throw new Error('Method not implemented.');
    }

    async updateDirectory(address: string, newDirectory: Directory): Promise<void> {
        
    }

    async getDirectoryGist(): Promise<Gist | undefined> {
        for await (const gist of this._allGists()) {
            if (gist.description === GithubGistContentHost.GIST_DESCRIPTION) {
                return gist;
            }
        }
        return undefined;
    }

    private async* _allGists(): AsyncGenerator<Gist, void, undefined> {
        let currentPageIdx = 1;
        let currentPage: Gist[] = [];
        do {
            const pageResp = await this.axiosInstance.get<Gist[]>(
                '/gists',
                {
                    params: {
                        per_page: 100,
                        page: currentPageIdx,
                    }
                }
            )
            currentPage = pageResp.data;
            yield* currentPage;
            currentPageIdx++;
        } while (currentPage.length > 0);
    }

    private async _axiosInterceptor(
        request: AxiosRequestConfig
    ): Promise<AxiosRequestConfig> {
        request.headers = {
            ...request.headers,
            Authorization: `token ${this.personalAccessToken}`,
        }
        return request;
    }
}
