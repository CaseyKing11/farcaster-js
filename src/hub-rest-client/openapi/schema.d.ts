/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/HubService/GetAllCastMessagesByFid": {
    /** Bulk Methods */
    post: operations["HubService_GetAllCastMessagesByFid"];
  };
  "/HubService/GetAllLinkMessagesByFid": {
    post: operations["HubService_GetAllLinkMessagesByFid"];
  };
  "/HubService/GetAllMessagesBySyncIds": {
    post: operations["HubService_GetAllMessagesBySyncIds"];
  };
  "/HubService/GetAllReactionMessagesByFid": {
    post: operations["HubService_GetAllReactionMessagesByFid"];
  };
  "/HubService/GetAllSyncIdsByPrefix": {
    post: operations["HubService_GetAllSyncIdsByPrefix"];
  };
  "/HubService/GetAllUserDataMessagesByFid": {
    post: operations["HubService_GetAllUserDataMessagesByFid"];
  };
  "/HubService/GetAllVerificationMessagesByFid": {
    post: operations["HubService_GetAllVerificationMessagesByFid"];
  };
  "/v1/castById": {
    /** Get a cast by its FID and Hash. */
    get: operations["GetCastById"];
  };
  "/v1/castsByFid": {
    /** Fetch all casts authored by an FID. */
    get: operations["ListCastsByFid"];
  };
  "/v1/castsByMention": {
    /** Fetch all casts that mention an FID */
    get: operations["ListCastsByMention"];
  };
  "/v1/castsByParent": {
    /** Fetch all casts by parent cast's FID and Hash OR by the parent's URL */
    get: operations["ListCastsByParent"];
  };
  "/v1/storageLimitsByFid": {
    /** Get an FID's storage limits. */
    get: operations["GetStorageLimitsByFid"];
  };
  "/HubService/GetEvent": {
    post: operations["HubService_GetEvent"];
  };
  "/v1/fids": {
    /** Get a list of all the FIDs */
    get: operations["ListFids"];
  };
  "/HubService/GetIdRegistryOnChainEvent": {
    post: operations["HubService_GetIdRegistryOnChainEvent"];
  };
  "/HubService/GetIdRegistryOnChainEventByAddress": {
    post: operations["HubService_GetIdRegistryOnChainEventByAddress"];
  };
  "/v1/info": {
    /** Sync Methods */
    get: operations["GetInfo"];
  };
  "/v1/linkById": {
    /** Get a link by its FID and target FID. */
    get: operations["GetLinkById"];
  };
  "/v1/linksByFid": {
    /** Get all links from a source FID */
    get: operations["ListLinksByFid"];
  };
  "/v1/linksByTargetFid": {
    /** Get all links to a target FID */
    get: operations["ListLinksByTargetFid"];
  };
  "/HubService/GetOnChainEvents": {
    post: operations["HubService_GetOnChainEvents"];
  };
  "/HubService/GetOnChainSigner": {
    /** OnChain Events */
    post: operations["HubService_GetOnChainSigner"];
  };
  "/HubService/GetOnChainSignersByFid": {
    post: operations["HubService_GetOnChainSignersByFid"];
  };
  "/v1/reactionById": {
    /** Get a reaction by its created FID and target Cast. */
    get: operations["GetReactionById"];
  };
  "/v1/reactionsByCast": {
    /** Get all reactions to a cast */
    get: operations["ListReactionsByCast"];
  };
  "/v1/reactionsByFid": {
    /** Get all reactions by an FID */
    get: operations["ListReactionsByFid"];
  };
  "/v1/reactionsByTarget": {
    get: operations["ListReactionsByTarget"];
  };
  "/HubService/GetSyncMetadataByPrefix": {
    post: operations["HubService_GetSyncMetadataByPrefix"];
  };
  "/HubService/GetSyncSnapshotByPrefix": {
    post: operations["HubService_GetSyncSnapshotByPrefix"];
  };
  "/HubService/GetSyncStatus": {
    post: operations["HubService_GetSyncStatus"];
  };
  "/v1/userDataByFid": {
    /**
     * Get UserData for a FID.
     * @description **Note:** one of two different response schemas is returned  based on whether the caller provides the `user_data_type` parameter. If included, a single `UserDataAdd` message is returned (or a `not_found` error). If omitted, a paginated list of `UserDataAdd` messages is returned instead
     */
    get: operations["GetUserDataByFid"];
  };
  "/HubService/GetUserDataByFid": {
    post: operations["HubService_GetUserDataByFid"];
  };
  "/v1/userNameProofsByFid": {
    /** Get a list of proofs provided by an FID */
    get: operations["ListUsernameProofsByFid"];
  };
  "/v1/userNameProofByName": {
    /** Get an proof for a username by the Farcaster username */
    get: operations["GetUsernameProof"];
  };
  "/HubService/GetVerification": {
    /** Verifications */
    post: operations["HubService_GetVerification"];
  };
  "/v1/verificationsByFid": {
    /** Get a list of verifications provided by an FID */
    get: operations["ListVerificationsByFid"];
  };
  "/HubService/SubmitMessage": {
    /** Submit Methods */
    post: operations["HubService_SubmitMessage"];
  };
  "/HubService/Subscribe": {
    /** Event Methods */
    post: operations["HubService_Subscribe"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    CastAdd: components["schemas"]["MessageCommon"] & {
      data: components["schemas"]["MessageDataCastAdd"];
    };
    /** * Adds a new Cast */
    CastAddBody: {
      /** URLs to be embedded in the cast */
      embedsDeprecated?: string[];
      /** Fids mentioned in the cast */
      mentions?: number[];
      parentCastId?: components["schemas"]["CastId"];
      /**
       * Parent URL
       * @example chain://eip155:1/erc721:0x39d89b649ffa044383333d297e325d42d31329b2
       */
      parentUrl?: string;
      /** Text of the cast */
      text?: string;
      /** Positions of the mentions in the text */
      mentionsPositions?: number[];
      /** URLs or cast ids to be embedded in the cast */
      embeds?: components["schemas"]["Embed"][];
    };
    /** * Identifier used to look up a Cast */
    CastId: {
      /**
       * Fid of the user who created the cast
       * Format: uint64
       */
      fid: number;
      hash: components["schemas"]["CastHash"];
    };
    CastHash: string;
    /** * Removes an existing Cast */
    CastRemoveBody: {
      /**
       * Hash of the cast to remove
       * Format: byte
       */
      targetHash?: string;
    };
    DbStats: {
      /** Format: uint64 */
      numMessages: number;
      /** Format: uint64 */
      numFidEvents: number;
      /** Format: uint64 */
      numFnameEvents: number;
    };
    Embed: {
      /** Format: uri */
      url?: string;
      castId?: components["schemas"]["CastId"];
    };
    Empty: Record<string, never>;
    ErrorResponse: {
      errCode: string;
      presentable: boolean;
      name: string;
      code: number;
      details: string;
      metadata: {
        errcode: string[];
      };
    };
    EventRequest: {
      /** Format: uint64 */
      id?: string;
    };
    /**
     * * Farcaster network the message is intended for
     * @description - FARCASTER_NETWORK_MAINNET: Public primary network
     *  - FARCASTER_NETWORK_TESTNET: Public test network
     *  - FARCASTER_NETWORK_DEVNET: Private test network
     * @default FARCASTER_NETWORK_MAINNET
     * @enum {string}
     */
    FarcasterNetwork: "FARCASTER_NETWORK_MAINNET" | "FARCASTER_NETWORK_TESTNET" | "FARCASTER_NETWORK_DEVNET";
    FidRequest: {
      /** Format: uint64 */
      fid?: string;
      /** Format: int64 */
      pageSize?: number;
      /** Format: byte */
      pageToken?: string;
      reverse?: boolean;
    };
    FidsRequest: {
      /** Format: int64 */
      pageSize?: number;
      /** Format: byte */
      pageToken?: string;
      reverse?: boolean;
    };
    FidsResponse: {
      fids: number[];
      /** Format: byte */
      nextPageToken: string;
    };
    /**
     * * Type of hashing scheme used to produce a digest of MessageData
     * @description - HASH_SCHEME_BLAKE3: Default scheme for hashing MessageData
     * @default HASH_SCHEME_BLAKE3
     * @enum {string}
     */
    HashScheme: "HASH_SCHEME_BLAKE3";
    HubEvent: {
      type?: components["schemas"]["HubEventType"];
      /** Format: uint64 */
      id?: number;
      mergeMessageBody?: components["schemas"]["MergeMessageBody"];
      pruneMessageBody?: components["schemas"]["PruneMessageBody"];
      revokeMessageBody?: components["schemas"]["RevokeMessageBody"];
      mergeUsernameProofBody?: components["schemas"]["MergeUserNameProofBody"];
      mergeOnChainEventBody?: components["schemas"]["MergeOnChainEventBody"];
    };
    /**
     * - HUB_EVENT_TYPE_MERGE_USERNAME_PROOF: Deprecated
     *  HUB_EVENT_TYPE_MERGE_ID_REGISTRY_EVENT = 4;
     *  HUB_EVENT_TYPE_MERGE_NAME_REGISTRY_EVENT = 5;
     *  - HUB_EVENT_TYPE_MERGE_ON_CHAIN_EVENT: Deprecated
     *  HUB_EVENT_TYPE_MERGE_RENT_REGISTRY_EVENT = 7;
     *  HUB_EVENT_TYPE_MERGE_STORAGE_ADMIN_REGISTRY_EVENT = 8;
     * @default HUB_EVENT_TYPE_MERGE_MESSAGE
     * @enum {string}
     */
    HubEventType: "HUB_EVENT_TYPE_MERGE_MESSAGE" | "HUB_EVENT_TYPE_PRUNE_MESSAGE" | "HUB_EVENT_TYPE_REVOKE_MESSAGE" | "HUB_EVENT_TYPE_MERGE_USERNAME_PROOF" | "HUB_EVENT_TYPE_MERGE_ON_CHAIN_EVENT";
    HubInfoRequest: {
      dbStats?: boolean;
    };
    /** Response Types for the Sync RPC Methods */
    HubInfoResponse: {
      version: string;
      isSyncing: boolean;
      nickname: string;
      rootHash: string;
      dbStats?: components["schemas"]["DbStats"];
      peerId: string;
      /** Format: uint64 */
      hubOperatorFid: number;
    };
    IdRegisterEventBody: {
      /** Format: byte */
      to?: string;
      eventType?: components["schemas"]["IdRegisterEventType"];
      /** Format: byte */
      from?: string;
      /** Format: byte */
      recoveryAddress?: string;
    };
    /**
     * @default ID_REGISTER_EVENT_TYPE_REGISTER
     * @enum {string}
     */
    IdRegisterEventType: "ID_REGISTER_EVENT_TYPE_REGISTER" | "ID_REGISTER_EVENT_TYPE_TRANSFER" | "ID_REGISTER_EVENT_TYPE_CHANGE_RECOVERY";
    IdRegistryEventByAddressRequest: {
      /** Format: byte */
      address?: string;
    };
    LinkAdd: components["schemas"]["MessageCommon"] & {
      data: components["schemas"]["MessageDataLinkAdd"];
    };
    /** * Adds or removes a Link */
    LinkBody: {
      type?: components["schemas"]["LinkType"];
      /**
       * User-defined timestamp that preserves original timestamp when message.data.timestamp needs to be updated for compaction
       * Format: int64
       */
      displayTimestamp?: number;
      /**
       * The fid the link relates to
       * Format: uint64
       */
      targetFid?: number;
    };
    LinkRequest: {
      /** Format: uint64 */
      fid?: number;
      linkType?: string;
      /** Format: uint64 */
      targetFid?: number;
    };
    LinksByFidRequest: {
      /** Format: uint64 */
      fid?: string;
      linkType?: string;
      /** Format: int64 */
      pageSize?: number;
      /** Format: byte */
      pageToken?: string;
      reverse?: boolean;
    };
    LinksByTargetRequest: {
      /** Format: uint64 */
      targetFid?: string;
      linkType?: string;
      /** Format: int64 */
      pageSize?: number;
      /** Format: byte */
      pageToken?: string;
      reverse?: boolean;
    };
    /**
     * * Type of Link
     * @description - follow: Follow another user
     * @default follow
     * @enum {string}
     */
    LinkType: "follow";
    MergeMessageBody: {
      message?: components["schemas"]["Message"];
      deletedMessages?: components["schemas"]["Message"][];
    };
    MergeOnChainEventBody: {
      onChainEvent?: components["schemas"]["OnChainEvent"];
    };
    MergeUserNameProofBody: {
      usernameProof?: components["schemas"]["UserNameProof"];
      deletedUsernameProof?: components["schemas"]["UserNameProof"];
      usernameProofMessage?: components["schemas"]["Message"];
      deletedUsernameProofMessage?: components["schemas"]["Message"];
    };
    /**
     * @description *
     * A Message is a delta operation on the Farcaster network. The message protobuf is an envelope
     * that wraps a MessageData object and contains a hash and signature which can verify its authenticity.
     */
    Message: Record<string, never>;
    MessageCommon: {
      /**
       * Hash digest of data
       * Format: byte
       * @example 0xd2b1ddc6c88e865a33cb1a565e0058d757042974
       */
      hash: string;
      hashScheme: components["schemas"]["HashScheme"];
      /**
       * Signature of the hash digest
       * Format: byte
       */
      signature: string;
      signatureScheme: components["schemas"]["SignatureScheme"];
      /**
       * Public key or address of the key pair that produced the signature
       * Format: byte
       */
      signer: string;
    };
    MessageDataCommon: {
      type: components["schemas"]["MessageType"];
      /**
       * Farcaster ID of the user producing the message
       * Format: uint64
       * @example 2
       */
      fid: number;
      /**
       * Farcaster epoch timestamp in seconds
       * Format: int64
       * @example 48994466
       */
      timestamp: number;
      network: components["schemas"]["FarcasterNetwork"];
    };
    MessageDataCastAdd: components["schemas"]["MessageDataCommon"] & {
      castAddBody: components["schemas"]["CastAddBody"];
    };
    MessageDataCastRemove: components["schemas"]["MessageDataCommon"] & {
      castRemoveBody: components["schemas"]["CastRemoveBody"];
    };
    MessageDataLinkAdd: components["schemas"]["MessageDataCommon"] & {
      linkBody: components["schemas"]["LinkBody"];
    };
    MessageDataReactionAdd: components["schemas"]["MessageDataCommon"] & {
      reactionBody: components["schemas"]["ReactionBody"];
    };
    MessageDataUserDataAdd: components["schemas"]["MessageDataCommon"] & {
      userDataBody: components["schemas"]["UserDataBody"];
    };
    MessageDataVerificationAdd: components["schemas"]["MessageDataCommon"] & {
      verificationAddEthAddressBody: components["schemas"]["VerificationAddEthAddressBody"];
    };
    /**
     * * Type of the MessageBody
     * @description - MESSAGE_TYPE_CAST_ADD: Add a new Cast
     *  - MESSAGE_TYPE_CAST_REMOVE: Remove an existing Cast
     *  - MESSAGE_TYPE_REACTION_ADD: Add a Reaction to a Cast
     *  - MESSAGE_TYPE_REACTION_REMOVE: Remove a Reaction from a Cast
     *  - MESSAGE_TYPE_LINK_ADD: Add a new Link
     *  - MESSAGE_TYPE_LINK_REMOVE: Remove an existing Link
     *  - MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS: Add a Verification of an Ethereum Address
     *  - MESSAGE_TYPE_VERIFICATION_REMOVE: Remove a Verification
     *  - MESSAGE_TYPE_USER_DATA_ADD: Deprecated
     *  MESSAGE_TYPE_SIGNER_ADD = 9; // Add a new Ed25519 key pair that signs messages for a user
     *  MESSAGE_TYPE_SIGNER_REMOVE = 10; // Remove an Ed25519 key pair that signs messages for a user
     *
     * Add metadata about a user
     *  - MESSAGE_TYPE_USERNAME_PROOF: Add or replace a username proof
     * @default MESSAGE_TYPE_CAST_ADD
     * @enum {string}
     */
    MessageType: "MESSAGE_TYPE_CAST_ADD" | "MESSAGE_TYPE_CAST_REMOVE" | "MESSAGE_TYPE_REACTION_ADD" | "MESSAGE_TYPE_REACTION_REMOVE" | "MESSAGE_TYPE_LINK_ADD" | "MESSAGE_TYPE_LINK_REMOVE" | "MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS" | "MESSAGE_TYPE_VERIFICATION_REMOVE" | "MESSAGE_TYPE_USER_DATA_ADD" | "MESSAGE_TYPE_USERNAME_PROOF";
    MessagesResponse: {
      messages: components["schemas"]["Message"][];
      /** Format: byte */
      nextPageToken: string;
    };
    OnChainEvent: {
      type?: components["schemas"]["OnChainEventType"];
      /** Format: int64 */
      chainId?: number;
      /** Format: int64 */
      blockNumber?: number;
      /** Format: byte */
      blockHash?: string;
      /** Format: uint64 */
      blockTimestamp?: number;
      /** Format: byte */
      transactionHash?: string;
      /** Format: int64 */
      logIndex?: number;
      /** Format: uint64 */
      fid?: number;
      signerEventBody?: components["schemas"]["SignerEventBody"];
      signerMigratedEventBody?: components["schemas"]["SignerMigratedEventBody"];
      idRegisterEventBody?: components["schemas"]["IdRegisterEventBody"];
      storageRentEventBody?: components["schemas"]["StorageRentEventBody"];
      /** Format: int64 */
      txIndex?: number;
    };
    OnChainEventRequest: {
      /** Format: uint64 */
      fid?: string;
      eventType?: components["schemas"]["OnChainEventType"];
      /** Format: int64 */
      pageSize?: number;
      /** Format: byte */
      pageToken?: string;
      reverse?: boolean;
    };
    OnChainEventResponse: {
      events?: components["schemas"]["OnChainEvent"][];
      /** Format: byte */
      nextPageToken?: string;
    };
    /**
     * @default EVENT_TYPE_SIGNER
     * @enum {string}
     */
    OnChainEventType: "EVENT_TYPE_SIGNER" | "EVENT_TYPE_SIGNER_MIGRATED" | "EVENT_TYPE_ID_REGISTER" | "EVENT_TYPE_STORAGE_RENT";
    PruneMessageBody: {
      message?: components["schemas"]["Message"];
    };
    Reaction: components["schemas"]["MessageCommon"] & {
      data: components["schemas"]["MessageDataReactionAdd"];
    };
    /** * Adds or removes a Reaction from a Cast */
    ReactionBody: {
      type?: components["schemas"]["ReactionType"];
      targetCastId?: components["schemas"]["CastId"];
      /** URL to react to */
      targetUrl?: string;
    };
    ReactionRequest: {
      /** Format: uint64 */
      fid?: string;
      reactionType?: components["schemas"]["ReactionType"];
      targetCastId?: components["schemas"]["CastId"];
      targetUrl?: string;
    };
    /**
     * * Type of Reaction
     * @description - REACTION_TYPE_LIKE: Like the target cast
     *  - REACTION_TYPE_RECAST: Share target cast to the user's audience
     * @default REACTION_TYPE_LIKE
     * @enum {string}
     */
    ReactionType: "REACTION_TYPE_LIKE" | "REACTION_TYPE_RECAST";
    ReactionsByFidRequest: {
      /** Format: uint64 */
      fid?: string;
      reactionType?: components["schemas"]["ReactionType"];
      /** Format: int64 */
      pageSize?: number;
      /** Format: byte */
      pageToken?: string;
      reverse?: boolean;
    };
    ReactionsByTargetRequest: {
      targetCastId?: components["schemas"]["CastId"];
      targetUrl?: string;
      reactionType?: components["schemas"]["ReactionType"];
      /** Format: int64 */
      pageSize?: number;
      /** Format: byte */
      pageToken?: string;
      reverse?: boolean;
    };
    RevokeMessageBody: {
      message?: components["schemas"]["Message"];
    };
    /**
     * * Type of signature scheme used to sign the Message hash
     * @description - SIGNATURE_SCHEME_ED25519: Ed25519 signature (default)
     *  - SIGNATURE_SCHEME_EIP712: ECDSA signature using EIP-712 scheme
     * @default SIGNATURE_SCHEME_ED25519
     * @enum {string}
     */
    SignatureScheme: "SIGNATURE_SCHEME_ED25519" | "SIGNATURE_SCHEME_EIP712";
    SignerEventBody: {
      /** Format: byte */
      key?: string;
      /** Format: int64 */
      keyType?: number;
      eventType?: components["schemas"]["SignerEventType"];
      /** Format: byte */
      metadata?: string;
      /** Format: int64 */
      metadataType?: number;
    };
    /**
     * @default SIGNER_EVENT_TYPE_ADD
     * @enum {string}
     */
    SignerEventType: "SIGNER_EVENT_TYPE_ADD" | "SIGNER_EVENT_TYPE_REMOVE" | "SIGNER_EVENT_TYPE_ADMIN_RESET";
    SignerMigratedEventBody: {
      /** Format: int64 */
      migratedAt?: number;
    };
    SignerRequest: {
      /** Format: uint64 */
      fid?: number;
      /** Format: byte */
      signer?: string;
    };
    StorageLimit: {
      storeType: components["schemas"]["StoreType"];
      /** Format: uint64 */
      limit: number;
    };
    StorageLimitsResponse: {
      limits: components["schemas"]["StorageLimit"][];
    };
    StorageRentEventBody: {
      /** Format: byte */
      payer?: string;
      /** Format: int64 */
      units?: number;
      /** Format: int64 */
      expiry?: number;
    };
    /**
     * @default STORE_TYPE_CASTS
     * @enum {string}
     */
    StoreType: "STORE_TYPE_CASTS" | "STORE_TYPE_LINKS" | "STORE_TYPE_REACTIONS" | "STORE_TYPE_USER_DATA" | "STORE_TYPE_VERIFICATIONS" | "STORE_TYPE_USERNAME_PROOFS";
    SubscribeRequest: {
      eventTypes?: components["schemas"]["HubEventType"][];
      /** Format: uint64 */
      fromId?: number;
    };
    SyncIds: {
      syncIds?: string[];
    };
    SyncStatus: {
      peerId?: string;
      inSync?: string;
      shouldSync?: boolean;
      divergencePrefix?: string;
      /** Format: int32 */
      divergenceSecondsAgo?: number;
      /** Format: uint64 */
      theirMessages?: number;
      /** Format: uint64 */
      ourMessages?: number;
      /** Format: int64 */
      lastBadSync?: number;
    };
    SyncStatusRequest: {
      peerId?: string;
    };
    SyncStatusResponse: {
      isSyncing?: boolean;
      syncStatus?: components["schemas"]["SyncStatus"][];
      engineStarted?: boolean;
    };
    TrieNodeMetadataResponse: {
      /** Format: byte */
      prefix?: string;
      /** Format: uint64 */
      numMessages?: string;
      hash?: string;
      children?: components["schemas"]["TrieNodeMetadataResponse"][];
    };
    TrieNodePrefix: {
      /** Format: byte */
      prefix?: string;
    };
    TrieNodeSnapshotResponse: {
      /** Format: byte */
      prefix?: string;
      excludedHashes?: string[];
      /** Format: uint64 */
      numMessages?: string;
      rootHash?: string;
    };
    UserDataAdd: components["schemas"]["MessageCommon"] & {
      data: components["schemas"]["MessageDataUserDataAdd"];
    };
    /** * Adds metadata about a user */
    UserDataBody: {
      type: components["schemas"]["UserDataType"];
      /** Value of the metadata */
      value: string;
    };
    UserDataRequest: {
      /** Format: uint64 */
      fid?: string;
      userDataType?: components["schemas"]["UserDataType"];
    };
    /**
     * * Type of UserData
     * @description - USER_DATA_TYPE_PFP: Profile Picture for the user
     *  - USER_DATA_TYPE_DISPLAY: Display Name for the user
     *  - USER_DATA_TYPE_BIO: Bio for the user
     *  - USER_DATA_TYPE_URL: URL of the user
     *  - USER_DATA_TYPE_USERNAME: Preferred Name for the user
     * @default USER_DATA_TYPE_PFP
     * @enum {string}
     */
    UserDataType: "USER_DATA_TYPE_PFP" | "USER_DATA_TYPE_DISPLAY" | "USER_DATA_TYPE_BIO" | "USER_DATA_TYPE_URL" | "USER_DATA_TYPE_USERNAME";
    UserNameProof: {
      /** Format: uint64 */
      timestamp: number;
      /** Format: byte */
      name: string;
      /** Format: byte */
      owner: string;
      /** Format: byte */
      signature: string;
      /** Format: uint64 */
      fid: number;
      type: components["schemas"]["UserNameType"];
    };
    /**
     * @default USERNAME_TYPE_FNAME
     * @enum {string}
     */
    UserNameType: "USERNAME_TYPE_FNAME" | "USERNAME_TYPE_ENS_L1";
    UsernameProofRequest: {
      /** Format: byte */
      name?: string;
    };
    UsernameProofsResponse: {
      proofs: components["schemas"]["UserNameProof"][];
    };
    Verification: components["schemas"]["MessageCommon"] & {
      data: components["schemas"]["MessageDataVerificationAdd"];
    };
    /** * Adds a Verification of ownership of an Ethereum Address */
    VerificationAddEthAddressBody: {
      /**
       * Ethereum address being verified
       * Format: byte
       */
      address?: string;
      /**
       * Signature produced by the user's Ethereum address
       * Format: byte
       */
      ethSignature?: string;
      /**
       * Hash of the latest Ethereum block when the signature was produced
       * Format: byte
       */
      blockHash?: string;
    };
    /** * Removes a Verification of any type */
    VerificationRemoveBody: {
      /**
       * Address of the Verification to remove
       * Format: byte
       */
      address?: string;
    };
    VerificationRequest: {
      /** Format: uint64 */
      fid?: string;
      /** Format: byte */
      address?: string;
    };
    protobufAny: {
      "@type"?: string;
      [key: string]: Record<string, never> | undefined;
    };
  };
  responses: {
    /** @description An unexpected error response. */
    ErrorResponse: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
  };
  parameters: {
    /** @description Maximum number of messages to return in a single response */
    pageSize?: number;
    /** @description Reverse the sort order, returning latest messages first */
    paginationReverse?: boolean;
    /** @description The page token returned by the previous query, to fetch the next page. If this parameter is empty, fetch the first page */
    pageToken?: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Bulk Methods */
  HubService_GetAllCastMessagesByFid: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FidRequest"];
      };
    };
    responses: {
      /** @description The requested Messages. */
      200: {
        content: {
          "application/json": components["schemas"]["MessagesResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  HubService_GetAllLinkMessagesByFid: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FidRequest"];
      };
    };
    responses: {
      /** @description The requested Messages. */
      200: {
        content: {
          "application/json": components["schemas"]["MessagesResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  HubService_GetAllMessagesBySyncIds: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SyncIds"];
      };
    };
    responses: {
      /** @description The requested Messages. */
      200: {
        content: {
          "application/json": components["schemas"]["MessagesResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  HubService_GetAllReactionMessagesByFid: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FidRequest"];
      };
    };
    responses: {
      /** @description The requested Messages. */
      200: {
        content: {
          "application/json": components["schemas"]["MessagesResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  HubService_GetAllSyncIdsByPrefix: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TrieNodePrefix"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["SyncIds"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  HubService_GetAllUserDataMessagesByFid: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FidRequest"];
      };
    };
    responses: {
      /** @description The requested Messages. */
      200: {
        content: {
          "application/json": components["schemas"]["MessagesResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  HubService_GetAllVerificationMessagesByFid: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FidRequest"];
      };
    };
    responses: {
      /** @description The requested Messages. */
      200: {
        content: {
          "application/json": components["schemas"]["MessagesResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Get a cast by its FID and Hash. */
  GetCastById: {
    parameters: {
      query: {
        /** @description The FID of the cast's creator */
        fid: number;
        /** @description The cast's hash */
        hash: string;
      };
    };
    responses: {
      /** @description The requested Cast. */
      200: {
        content: {
          "application/json": components["schemas"]["CastAdd"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Fetch all casts authored by an FID. */
  ListCastsByFid: {
    parameters: {
      query: {
        /** @description The FID of the casts' creator */
        fid: number;
        pageSize?: components["parameters"]["pageSize"];
        reverse?: components["parameters"]["paginationReverse"];
        pageToken?: components["parameters"]["pageToken"];
      };
    };
    responses: {
      /** @description The requested Casts. */
      200: {
        content: {
          "application/json": {
            messages: components["schemas"]["CastAdd"][];
            /** Format: byte */
            nextPageToken: string;
          };
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Fetch all casts that mention an FID */
  ListCastsByMention: {
    parameters: {
      query: {
        /** @description The FID that is mentioned in a cast */
        fid: number;
        pageSize?: components["parameters"]["pageSize"];
        reverse?: components["parameters"]["paginationReverse"];
        pageToken?: components["parameters"]["pageToken"];
      };
    };
    responses: {
      /** @description The requested Casts. */
      200: {
        content: {
          "application/json": {
            messages: components["schemas"]["CastAdd"][];
            /** Format: byte */
            nextPageToken: string;
          };
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Fetch all casts by parent cast's FID and Hash OR by the parent's URL */
  ListCastsByParent: {
    parameters: {
      query?: {
        /** @description The FID of the parent cast */
        fid?: number;
        /** @description The parent cast's hash */
        hash?: string;
        url?: string;
        pageSize?: components["parameters"]["pageSize"];
        reverse?: components["parameters"]["paginationReverse"];
        pageToken?: components["parameters"]["pageToken"];
      };
    };
    responses: {
      /** @description The requested Casts. */
      200: {
        content: {
          "application/json": {
            messages: components["schemas"]["CastAdd"][];
            /** Format: byte */
            nextPageToken: string;
          };
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Get an FID's storage limits. */
  GetStorageLimitsByFid: {
    parameters: {
      query: {
        fid: number;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["StorageLimitsResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  HubService_GetEvent: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EventRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["HubEvent"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Get a list of all the FIDs */
  ListFids: {
    parameters: {
      query?: {
        pageSize?: components["parameters"]["pageSize"];
        reverse?: components["parameters"]["paginationReverse"];
        pageToken?: components["parameters"]["pageToken"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["FidsResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  HubService_GetIdRegistryOnChainEvent: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FidRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["OnChainEvent"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  HubService_GetIdRegistryOnChainEventByAddress: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["IdRegistryEventByAddressRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["OnChainEvent"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Sync Methods */
  GetInfo: {
    parameters: {
      query: {
        /** @description Whether to return DB stats */
        dbstats: boolean;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["HubInfoResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Get a link by its FID and target FID. */
  GetLinkById: {
    parameters: {
      query: {
        /** @description The FID of the link's originator */
        fid: number;
        /** @description The FID of the target of the link */
        target_fid: number;
        /** @description The type of link, as a string value */
        link_type: components["schemas"]["LinkType"];
      };
    };
    responses: {
      /** @description The requested Link. */
      200: {
        content: {
          "application/json": components["schemas"]["LinkAdd"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Get all links from a source FID */
  ListLinksByFid: {
    parameters: {
      query: {
        /** @description The FID of the link's originator */
        fid: number;
        /** @description The type of link, as a string value */
        link_type?: components["schemas"]["LinkType"];
        pageSize?: components["parameters"]["pageSize"];
        reverse?: components["parameters"]["paginationReverse"];
        pageToken?: components["parameters"]["pageToken"];
      };
    };
    responses: {
      /** @description The requested Links. */
      200: {
        content: {
          "application/json": {
            messages: components["schemas"]["LinkAdd"][];
            /** Format: byte */
            nextPageToken: string;
          };
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Get all links to a target FID */
  ListLinksByTargetFid: {
    parameters: {
      query: {
        /** @description The FID of the target of the link */
        target_fid: number;
        /** @description The type of link, as a string value */
        link_type?: components["schemas"]["LinkType"];
        pageSize?: components["parameters"]["pageSize"];
        reverse?: components["parameters"]["paginationReverse"];
        pageToken?: components["parameters"]["pageToken"];
      };
    };
    responses: {
      /** @description The requested Links. */
      200: {
        content: {
          "application/json": {
            messages: components["schemas"]["LinkAdd"][];
            /** Format: byte */
            nextPageToken: string;
          };
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  HubService_GetOnChainEvents: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OnChainEventRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["OnChainEventResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** OnChain Events */
  HubService_GetOnChainSigner: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignerRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["OnChainEvent"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  HubService_GetOnChainSignersByFid: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FidRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["OnChainEventResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Get a reaction by its created FID and target Cast. */
  GetReactionById: {
    parameters: {
      query: {
        /** @description The FID of the reaction's creator */
        fid: number;
        /** @description The FID of the cast's creator */
        target_fid: number;
        /** @description The cast's hash */
        target_hash: string;
        /** @description The type of reaction, either as a numerical enum value or string representation */
        reaction_type: components["schemas"]["ReactionType"];
      };
    };
    responses: {
      /** @description The requested Reaction. */
      200: {
        content: {
          "application/json": components["schemas"]["Reaction"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Get all reactions to a cast */
  ListReactionsByCast: {
    parameters: {
      query: {
        /** @description The FID of the cast's creator */
        target_fid: number;
        /** @description The hash of the cast */
        target_hash: string;
        /** @description The type of reaction, either as a numerical enum value or string representation */
        reaction_type: components["schemas"]["ReactionType"];
        pageSize?: components["parameters"]["pageSize"];
        reverse?: components["parameters"]["paginationReverse"];
        pageToken?: components["parameters"]["pageToken"];
      };
    };
    responses: {
      /** @description The requested Reactions. */
      200: {
        content: {
          "application/json": {
            messages: components["schemas"]["Reaction"][];
            /** Format: byte */
            nextPageToken: string;
          };
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Get all reactions by an FID */
  ListReactionsByFid: {
    parameters: {
      query: {
        /** @description The FID of the reaction's creator */
        fid: number;
        /** @description The type of reaction, either as a numerical enum value or string representation */
        reaction_type: components["schemas"]["ReactionType"];
        pageSize?: components["parameters"]["pageSize"];
        reverse?: components["parameters"]["paginationReverse"];
        pageToken?: components["parameters"]["pageToken"];
      };
    };
    responses: {
      /** @description The requested Reactions. */
      200: {
        content: {
          "application/json": {
            messages: components["schemas"]["Reaction"][];
            /** Format: byte */
            nextPageToken: string;
          };
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  ListReactionsByTarget: {
    parameters: {
      query: {
        /** @description The URL of the parent cast */
        url: string;
        /** @description The type of reaction, either as a numerical enum value or string representation */
        reaction_type: components["schemas"]["ReactionType"];
        pageSize?: components["parameters"]["pageSize"];
        reverse?: components["parameters"]["paginationReverse"];
        pageToken?: components["parameters"]["pageToken"];
      };
    };
    responses: {
      /** @description The requested Reactions. */
      200: {
        content: {
          "application/json": {
            messages: components["schemas"]["Reaction"][];
            /** Format: byte */
            nextPageToken: string;
          };
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  HubService_GetSyncMetadataByPrefix: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TrieNodePrefix"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["TrieNodeMetadataResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  HubService_GetSyncSnapshotByPrefix: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TrieNodePrefix"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["TrieNodeSnapshotResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  HubService_GetSyncStatus: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SyncStatusRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["SyncStatusResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /**
   * Get UserData for a FID.
   * @description **Note:** one of two different response schemas is returned  based on whether the caller provides the `user_data_type` parameter. If included, a single `UserDataAdd` message is returned (or a `not_found` error). If omitted, a paginated list of `UserDataAdd` messages is returned instead
   */
  GetUserDataByFid: {
    parameters: {
      query: {
        /** @description The FID that's being requested */
        fid: number;
        /** @description The type of user data, either as a numerical value or type string. If this is omitted, all user data for the FID is returned */
        user_data_type?: components["schemas"]["UserDataType"];
        pageSize?: components["parameters"]["pageSize"];
        reverse?: components["parameters"]["paginationReverse"];
        pageToken?: components["parameters"]["pageToken"];
      };
    };
    responses: {
      /** @description The requested UserData. */
      200: {
        content: {
          "application/json": OneOf<[components["schemas"]["UserDataAdd"], {
            messages: components["schemas"]["UserDataAdd"][];
            /** Format: byte */
            nextPageToken: string;
          }]>;
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  HubService_GetUserDataByFid: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FidRequest"];
      };
    };
    responses: {
      /** @description The requested Messages. */
      200: {
        content: {
          "application/json": components["schemas"]["MessagesResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Get a list of proofs provided by an FID */
  ListUsernameProofsByFid: {
    parameters: {
      query: {
        /** @description The FID being requested */
        fid: number;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["UsernameProofsResponse"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Get an proof for a username by the Farcaster username */
  GetUsernameProof: {
    parameters: {
      query: {
        /** @description The Farcaster username or ENS address */
        name: string;
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["UserNameProof"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Verifications */
  HubService_GetVerification: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerificationRequest"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Get a list of verifications provided by an FID */
  ListVerificationsByFid: {
    parameters: {
      query: {
        /** @description The FID being requested */
        fid: number;
        /** @description The optional ETH address to filter by */
        address?: string;
        pageSize?: components["parameters"]["pageSize"];
        reverse?: components["parameters"]["paginationReverse"];
        pageToken?: components["parameters"]["pageToken"];
      };
    };
    responses: {
      /** @description The requested Reactions. */
      200: {
        content: {
          "application/json": {
            messages: components["schemas"]["Verification"][];
            /** Format: byte */
            nextPageToken: string;
          };
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Submit Methods */
  HubService_SubmitMessage: {
    /**
     * @description *
     * A Message is a delta operation on the Farcaster network. The message protobuf is an envelope
     * that wraps a MessageData object and contains a hash and signature which can verify its authenticity.
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Message"];
      };
    };
    responses: {
      /** @description A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
  /** Event Methods */
  HubService_Subscribe: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubscribeRequest"];
      };
    };
    responses: {
      /** @description A successful response.(streaming responses) */
      200: {
        content: {
          "application/json": {
            result?: components["schemas"]["HubEvent"];
            error?: components["schemas"]["ErrorResponse"];
          };
        };
      };
      default: components["responses"]["ErrorResponse"];
    };
  };
}
