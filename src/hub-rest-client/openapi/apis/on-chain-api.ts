/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster Hub REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { ListOnChainEventsByFid200Response } from '../models';
// @ts-ignore
import { ListOnChainSignersByFid200Response } from '../models';
// @ts-ignore
import { OnChainEventIdRegister } from '../models';
// @ts-ignore
import { OnChainEventType } from '../models';
/**
 * OnChainApi - axios parameter creator
 * @export
 */
export const OnChainApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get an on chain ID Registry Event for a given Address
         * @param {string} address The ETH address being requested
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOnChainIdRegistrationByAddress: async (address: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('getOnChainIdRegistrationByAddress', 'address', address)
            const localVarPath = `/v1/onChainIdRegistryEventByAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of on-chain events provided by an FID
         * @param {number} fid The FID being requested
         * @param {OnChainEventType} eventType The numeric of string value of the event type being requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOnChainEventsByFid: async (fid: number, eventType: OnChainEventType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('listOnChainEventsByFid', 'fid', fid)
            // verify required parameter 'eventType' is not null or undefined
            assertParamExists('listOnChainEventsByFid', 'eventType', eventType)
            const localVarPath = `/v1/onChainEventsByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (eventType !== undefined) {
                localVarQueryParameter['event_type'] = eventType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Note:** one of two different response schemas is returned based on whether the caller provides the `signer` parameter. If included, a single `OnChainEventSigner` message is returned (or a `not_found` error). If omitted, a paginated list of `OnChainEventSigner` messages is returned instead
         * @summary Get a list of signers provided by an FID
         * @param {number} fid The FID being requested
         * @param {string} [signer] The optional key of signer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOnChainSignersByFid: async (fid: number, signer?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fid' is not null or undefined
            assertParamExists('listOnChainSignersByFid', 'fid', fid)
            const localVarPath = `/v1/onChainSignersByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }

            if (signer !== undefined) {
                localVarQueryParameter['signer'] = signer;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnChainApi - functional programming interface
 * @export
 */
export const OnChainApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnChainApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get an on chain ID Registry Event for a given Address
         * @param {string} address The ETH address being requested
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOnChainIdRegistrationByAddress(address: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnChainEventIdRegister>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOnChainIdRegistrationByAddress(address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of on-chain events provided by an FID
         * @param {number} fid The FID being requested
         * @param {OnChainEventType} eventType The numeric of string value of the event type being requested.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOnChainEventsByFid(fid: number, eventType: OnChainEventType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOnChainEventsByFid200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOnChainEventsByFid(fid, eventType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Note:** one of two different response schemas is returned based on whether the caller provides the `signer` parameter. If included, a single `OnChainEventSigner` message is returned (or a `not_found` error). If omitted, a paginated list of `OnChainEventSigner` messages is returned instead
         * @summary Get a list of signers provided by an FID
         * @param {number} fid The FID being requested
         * @param {string} [signer] The optional key of signer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOnChainSignersByFid(fid: number, signer?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOnChainSignersByFid200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOnChainSignersByFid(fid, signer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OnChainApi - factory interface
 * @export
 */
export const OnChainApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnChainApiFp(configuration)
    return {
        /**
         * 
         * @summary Get an on chain ID Registry Event for a given Address
         * @param {OnChainApiGetOnChainIdRegistrationByAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOnChainIdRegistrationByAddress(requestParameters: OnChainApiGetOnChainIdRegistrationByAddressRequest, options?: AxiosRequestConfig): AxiosPromise<OnChainEventIdRegister> {
            return localVarFp.getOnChainIdRegistrationByAddress(requestParameters.address, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of on-chain events provided by an FID
         * @param {OnChainApiListOnChainEventsByFidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOnChainEventsByFid(requestParameters: OnChainApiListOnChainEventsByFidRequest, options?: AxiosRequestConfig): AxiosPromise<ListOnChainEventsByFid200Response> {
            return localVarFp.listOnChainEventsByFid(requestParameters.fid, requestParameters.eventType, options).then((request) => request(axios, basePath));
        },
        /**
         * **Note:** one of two different response schemas is returned based on whether the caller provides the `signer` parameter. If included, a single `OnChainEventSigner` message is returned (or a `not_found` error). If omitted, a paginated list of `OnChainEventSigner` messages is returned instead
         * @summary Get a list of signers provided by an FID
         * @param {OnChainApiListOnChainSignersByFidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOnChainSignersByFid(requestParameters: OnChainApiListOnChainSignersByFidRequest, options?: AxiosRequestConfig): AxiosPromise<ListOnChainSignersByFid200Response> {
            return localVarFp.listOnChainSignersByFid(requestParameters.fid, requestParameters.signer, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getOnChainIdRegistrationByAddress operation in OnChainApi.
 * @export
 * @interface OnChainApiGetOnChainIdRegistrationByAddressRequest
 */
export interface OnChainApiGetOnChainIdRegistrationByAddressRequest {
    /**
     * The ETH address being requested
     * @type {string}
     * @memberof OnChainApiGetOnChainIdRegistrationByAddress
     */
    readonly address: string
}

/**
 * Request parameters for listOnChainEventsByFid operation in OnChainApi.
 * @export
 * @interface OnChainApiListOnChainEventsByFidRequest
 */
export interface OnChainApiListOnChainEventsByFidRequest {
    /**
     * The FID being requested
     * @type {number}
     * @memberof OnChainApiListOnChainEventsByFid
     */
    readonly fid: number

    /**
     * The numeric of string value of the event type being requested.
     * @type {OnChainEventType}
     * @memberof OnChainApiListOnChainEventsByFid
     */
    readonly eventType: OnChainEventType
}

/**
 * Request parameters for listOnChainSignersByFid operation in OnChainApi.
 * @export
 * @interface OnChainApiListOnChainSignersByFidRequest
 */
export interface OnChainApiListOnChainSignersByFidRequest {
    /**
     * The FID being requested
     * @type {number}
     * @memberof OnChainApiListOnChainSignersByFid
     */
    readonly fid: number

    /**
     * The optional key of signer
     * @type {string}
     * @memberof OnChainApiListOnChainSignersByFid
     */
    readonly signer?: string
}

/**
 * OnChainApi - object-oriented interface
 * @export
 * @class OnChainApi
 * @extends {BaseAPI}
 */
export class OnChainApi extends BaseAPI {
    /**
     * 
     * @summary Get an on chain ID Registry Event for a given Address
     * @param {OnChainApiGetOnChainIdRegistrationByAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnChainApi
     */
    public getOnChainIdRegistrationByAddress(requestParameters: OnChainApiGetOnChainIdRegistrationByAddressRequest, options?: AxiosRequestConfig) {
        return OnChainApiFp(this.configuration).getOnChainIdRegistrationByAddress(requestParameters.address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of on-chain events provided by an FID
     * @param {OnChainApiListOnChainEventsByFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnChainApi
     */
    public listOnChainEventsByFid(requestParameters: OnChainApiListOnChainEventsByFidRequest, options?: AxiosRequestConfig) {
        return OnChainApiFp(this.configuration).listOnChainEventsByFid(requestParameters.fid, requestParameters.eventType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Note:** one of two different response schemas is returned based on whether the caller provides the `signer` parameter. If included, a single `OnChainEventSigner` message is returned (or a `not_found` error). If omitted, a paginated list of `OnChainEventSigner` messages is returned instead
     * @summary Get a list of signers provided by an FID
     * @param {OnChainApiListOnChainSignersByFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnChainApi
     */
    public listOnChainSignersByFid(requestParameters: OnChainApiListOnChainSignersByFidRequest, options?: AxiosRequestConfig) {
        return OnChainApiFp(this.configuration).listOnChainSignersByFid(requestParameters.fid, requestParameters.signer, options).then((request) => request(this.axios, this.basePath));
    }
}
