/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster Hub REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { EventRequest } from '../models';
// @ts-ignore
import { FidRequest } from '../models';
// @ts-ignore
import { FidsRequest } from '../models';
// @ts-ignore
import { FidsResponse } from '../models';
// @ts-ignore
import { HubEvent } from '../models';
// @ts-ignore
import { IdRegistryEventByAddressRequest } from '../models';
// @ts-ignore
import { LinkRequest } from '../models';
// @ts-ignore
import { LinksByFidRequest } from '../models';
// @ts-ignore
import { LinksByTargetRequest } from '../models';
// @ts-ignore
import { Message } from '../models';
// @ts-ignore
import { MessagesResponse } from '../models';
// @ts-ignore
import { OnChainEvent } from '../models';
// @ts-ignore
import { OnChainEventRequest } from '../models';
// @ts-ignore
import { OnChainEventResponse } from '../models';
// @ts-ignore
import { ReactionsByFidRequest } from '../models';
// @ts-ignore
import { ReactionsByTargetRequest } from '../models';
// @ts-ignore
import { SignerRequest } from '../models';
// @ts-ignore
import { StorageLimitsResponse } from '../models';
// @ts-ignore
import { StreamResultOfHubEvent } from '../models';
// @ts-ignore
import { SubscribeRequest } from '../models';
// @ts-ignore
import { SyncIds } from '../models';
// @ts-ignore
import { SyncStatusRequest } from '../models';
// @ts-ignore
import { SyncStatusResponse } from '../models';
// @ts-ignore
import { TrieNodeMetadataResponse } from '../models';
// @ts-ignore
import { TrieNodePrefix } from '../models';
// @ts-ignore
import { TrieNodeSnapshotResponse } from '../models';
// @ts-ignore
import { UserDataRequest } from '../models';
// @ts-ignore
import { UserNameProof } from '../models';
// @ts-ignore
import { UsernameProofRequest } from '../models';
// @ts-ignore
import { UsernameProofsResponse } from '../models';
// @ts-ignore
import { VerificationRequest } from '../models';
/**
 * HubServiceApi - axios parameter creator
 * @export
 */
export const HubServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetAllLinkMessagesByFid: async (body: FidRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetAllLinkMessagesByFid', 'body', body)
            const localVarPath = `/HubService/GetAllLinkMessagesByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SyncIds} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetAllMessagesBySyncIds: async (body: SyncIds, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetAllMessagesBySyncIds', 'body', body)
            const localVarPath = `/HubService/GetAllMessagesBySyncIds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetAllReactionMessagesByFid: async (body: FidRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetAllReactionMessagesByFid', 'body', body)
            const localVarPath = `/HubService/GetAllReactionMessagesByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TrieNodePrefix} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetAllSyncIdsByPrefix: async (body: TrieNodePrefix, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetAllSyncIdsByPrefix', 'body', body)
            const localVarPath = `/HubService/GetAllSyncIdsByPrefix`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetAllUserDataMessagesByFid: async (body: FidRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetAllUserDataMessagesByFid', 'body', body)
            const localVarPath = `/HubService/GetAllUserDataMessagesByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetAllVerificationMessagesByFid: async (body: FidRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetAllVerificationMessagesByFid', 'body', body)
            const localVarPath = `/HubService/GetAllVerificationMessagesByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetCurrentStorageLimitsByFid: async (body: FidRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetCurrentStorageLimitsByFid', 'body', body)
            const localVarPath = `/HubService/GetCurrentStorageLimitsByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EventRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetEvent: async (body: EventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetEvent', 'body', body)
            const localVarPath = `/HubService/GetEvent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FidsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetFids: async (body: FidsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetFids', 'body', body)
            const localVarPath = `/HubService/GetFids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetIdRegistryOnChainEvent: async (body: FidRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetIdRegistryOnChainEvent', 'body', body)
            const localVarPath = `/HubService/GetIdRegistryOnChainEvent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IdRegistryEventByAddressRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetIdRegistryOnChainEventByAddress: async (body: IdRegistryEventByAddressRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetIdRegistryOnChainEventByAddress', 'body', body)
            const localVarPath = `/HubService/GetIdRegistryOnChainEventByAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Links
         * @param {LinkRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetLink: async (body: LinkRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetLink', 'body', body)
            const localVarPath = `/HubService/GetLink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LinksByFidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetLinksByFid: async (body: LinksByFidRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetLinksByFid', 'body', body)
            const localVarPath = `/HubService/GetLinksByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LinksByTargetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetLinksByTarget: async (body: LinksByTargetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetLinksByTarget', 'body', body)
            const localVarPath = `/HubService/GetLinksByTarget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OnChainEventRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetOnChainEvents: async (body: OnChainEventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetOnChainEvents', 'body', body)
            const localVarPath = `/HubService/GetOnChainEvents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary OnChain Events
         * @param {SignerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetOnChainSigner: async (body: SignerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetOnChainSigner', 'body', body)
            const localVarPath = `/HubService/GetOnChainSigner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetOnChainSignersByFid: async (body: FidRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetOnChainSignersByFid', 'body', body)
            const localVarPath = `/HubService/GetOnChainSignersByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary To be deprecated
         * @param {ReactionsByTargetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetReactionsByCast: async (body: ReactionsByTargetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetReactionsByCast', 'body', body)
            const localVarPath = `/HubService/GetReactionsByCast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ReactionsByFidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetReactionsByFid: async (body: ReactionsByFidRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetReactionsByFid', 'body', body)
            const localVarPath = `/HubService/GetReactionsByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ReactionsByTargetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetReactionsByTarget: async (body: ReactionsByTargetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetReactionsByTarget', 'body', body)
            const localVarPath = `/HubService/GetReactionsByTarget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TrieNodePrefix} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetSyncMetadataByPrefix: async (body: TrieNodePrefix, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetSyncMetadataByPrefix', 'body', body)
            const localVarPath = `/HubService/GetSyncMetadataByPrefix`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TrieNodePrefix} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetSyncSnapshotByPrefix: async (body: TrieNodePrefix, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetSyncSnapshotByPrefix', 'body', body)
            const localVarPath = `/HubService/GetSyncSnapshotByPrefix`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SyncStatusRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetSyncStatus: async (body: SyncStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetSyncStatus', 'body', body)
            const localVarPath = `/HubService/GetSyncStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User Data
         * @param {UserDataRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetUserData: async (body: UserDataRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetUserData', 'body', body)
            const localVarPath = `/HubService/GetUserData`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetUserDataByFid: async (body: FidRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetUserDataByFid', 'body', body)
            const localVarPath = `/HubService/GetUserDataByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetUserNameProofsByFid: async (body: FidRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetUserNameProofsByFid', 'body', body)
            const localVarPath = `/HubService/GetUserNameProofsByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Username Proof
         * @param {UsernameProofRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetUsernameProof: async (body: UsernameProofRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetUsernameProof', 'body', body)
            const localVarPath = `/HubService/GetUsernameProof`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verifications
         * @param {VerificationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetVerification: async (body: VerificationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetVerification', 'body', body)
            const localVarPath = `/HubService/GetVerification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetVerificationsByFid: async (body: FidRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetVerificationsByFid', 'body', body)
            const localVarPath = `/HubService/GetVerificationsByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Submit Methods
         * @param {Message} body *  A Message is a delta operation on the Farcaster network. The message protobuf is an envelope  that wraps a MessageData object and contains a hash and signature which can verify its authenticity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceSubmitMessage: async (body: Message, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceSubmitMessage', 'body', body)
            const localVarPath = `/HubService/SubmitMessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Event Methods
         * @param {SubscribeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceSubscribe: async (body: SubscribeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceSubscribe', 'body', body)
            const localVarPath = `/HubService/Subscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HubServiceApi - functional programming interface
 * @export
 */
export const HubServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HubServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetAllLinkMessagesByFid(body: FidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetAllLinkMessagesByFid(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SyncIds} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetAllMessagesBySyncIds(body: SyncIds, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetAllMessagesBySyncIds(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetAllReactionMessagesByFid(body: FidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetAllReactionMessagesByFid(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TrieNodePrefix} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetAllSyncIdsByPrefix(body: TrieNodePrefix, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncIds>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetAllSyncIdsByPrefix(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetAllUserDataMessagesByFid(body: FidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetAllUserDataMessagesByFid(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetAllVerificationMessagesByFid(body: FidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetAllVerificationMessagesByFid(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetCurrentStorageLimitsByFid(body: FidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StorageLimitsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetCurrentStorageLimitsByFid(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EventRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetEvent(body: EventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HubEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetEvent(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FidsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetFids(body: FidsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FidsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetFids(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetIdRegistryOnChainEvent(body: FidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnChainEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetIdRegistryOnChainEvent(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IdRegistryEventByAddressRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetIdRegistryOnChainEventByAddress(body: IdRegistryEventByAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnChainEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetIdRegistryOnChainEventByAddress(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Links
         * @param {LinkRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetLink(body: LinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetLink(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LinksByFidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetLinksByFid(body: LinksByFidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetLinksByFid(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LinksByTargetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetLinksByTarget(body: LinksByTargetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetLinksByTarget(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OnChainEventRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetOnChainEvents(body: OnChainEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnChainEventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetOnChainEvents(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary OnChain Events
         * @param {SignerRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetOnChainSigner(body: SignerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnChainEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetOnChainSigner(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetOnChainSignersByFid(body: FidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OnChainEventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetOnChainSignersByFid(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary To be deprecated
         * @param {ReactionsByTargetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetReactionsByCast(body: ReactionsByTargetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetReactionsByCast(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ReactionsByFidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetReactionsByFid(body: ReactionsByFidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetReactionsByFid(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ReactionsByTargetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetReactionsByTarget(body: ReactionsByTargetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetReactionsByTarget(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TrieNodePrefix} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetSyncMetadataByPrefix(body: TrieNodePrefix, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrieNodeMetadataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetSyncMetadataByPrefix(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TrieNodePrefix} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetSyncSnapshotByPrefix(body: TrieNodePrefix, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrieNodeSnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetSyncSnapshotByPrefix(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SyncStatusRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetSyncStatus(body: SyncStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetSyncStatus(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary User Data
         * @param {UserDataRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetUserData(body: UserDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetUserData(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetUserDataByFid(body: FidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetUserDataByFid(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetUserNameProofsByFid(body: FidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsernameProofsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetUserNameProofsByFid(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Username Proof
         * @param {UsernameProofRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetUsernameProof(body: UsernameProofRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserNameProof>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetUsernameProof(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Verifications
         * @param {VerificationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetVerification(body: VerificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetVerification(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetVerificationsByFid(body: FidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetVerificationsByFid(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Submit Methods
         * @param {Message} body *  A Message is a delta operation on the Farcaster network. The message protobuf is an envelope  that wraps a MessageData object and contains a hash and signature which can verify its authenticity.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceSubmitMessage(body: Message, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceSubmitMessage(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Event Methods
         * @param {SubscribeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceSubscribe(body: SubscribeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamResultOfHubEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceSubscribe(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HubServiceApi - factory interface
 * @export
 */
export const HubServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HubServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {HubServiceApiHubServiceGetAllLinkMessagesByFidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetAllLinkMessagesByFid(requestParameters: HubServiceApiHubServiceGetAllLinkMessagesByFidRequest, options?: AxiosRequestConfig): AxiosPromise<MessagesResponse> {
            return localVarFp.hubServiceGetAllLinkMessagesByFid(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetAllMessagesBySyncIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetAllMessagesBySyncIds(requestParameters: HubServiceApiHubServiceGetAllMessagesBySyncIdsRequest, options?: AxiosRequestConfig): AxiosPromise<MessagesResponse> {
            return localVarFp.hubServiceGetAllMessagesBySyncIds(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetAllReactionMessagesByFidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetAllReactionMessagesByFid(requestParameters: HubServiceApiHubServiceGetAllReactionMessagesByFidRequest, options?: AxiosRequestConfig): AxiosPromise<MessagesResponse> {
            return localVarFp.hubServiceGetAllReactionMessagesByFid(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetAllSyncIdsByPrefixRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetAllSyncIdsByPrefix(requestParameters: HubServiceApiHubServiceGetAllSyncIdsByPrefixRequest, options?: AxiosRequestConfig): AxiosPromise<SyncIds> {
            return localVarFp.hubServiceGetAllSyncIdsByPrefix(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetAllUserDataMessagesByFidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetAllUserDataMessagesByFid(requestParameters: HubServiceApiHubServiceGetAllUserDataMessagesByFidRequest, options?: AxiosRequestConfig): AxiosPromise<MessagesResponse> {
            return localVarFp.hubServiceGetAllUserDataMessagesByFid(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetAllVerificationMessagesByFidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetAllVerificationMessagesByFid(requestParameters: HubServiceApiHubServiceGetAllVerificationMessagesByFidRequest, options?: AxiosRequestConfig): AxiosPromise<MessagesResponse> {
            return localVarFp.hubServiceGetAllVerificationMessagesByFid(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetCurrentStorageLimitsByFidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetCurrentStorageLimitsByFid(requestParameters: HubServiceApiHubServiceGetCurrentStorageLimitsByFidRequest, options?: AxiosRequestConfig): AxiosPromise<StorageLimitsResponse> {
            return localVarFp.hubServiceGetCurrentStorageLimitsByFid(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetEvent(requestParameters: HubServiceApiHubServiceGetEventRequest, options?: AxiosRequestConfig): AxiosPromise<HubEvent> {
            return localVarFp.hubServiceGetEvent(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetFidsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetFids(requestParameters: HubServiceApiHubServiceGetFidsRequest, options?: AxiosRequestConfig): AxiosPromise<FidsResponse> {
            return localVarFp.hubServiceGetFids(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetIdRegistryOnChainEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetIdRegistryOnChainEvent(requestParameters: HubServiceApiHubServiceGetIdRegistryOnChainEventRequest, options?: AxiosRequestConfig): AxiosPromise<OnChainEvent> {
            return localVarFp.hubServiceGetIdRegistryOnChainEvent(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetIdRegistryOnChainEventByAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetIdRegistryOnChainEventByAddress(requestParameters: HubServiceApiHubServiceGetIdRegistryOnChainEventByAddressRequest, options?: AxiosRequestConfig): AxiosPromise<OnChainEvent> {
            return localVarFp.hubServiceGetIdRegistryOnChainEventByAddress(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Links
         * @param {HubServiceApiHubServiceGetLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetLink(requestParameters: HubServiceApiHubServiceGetLinkRequest, options?: AxiosRequestConfig): AxiosPromise<Message> {
            return localVarFp.hubServiceGetLink(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetLinksByFidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetLinksByFid(requestParameters: HubServiceApiHubServiceGetLinksByFidRequest, options?: AxiosRequestConfig): AxiosPromise<MessagesResponse> {
            return localVarFp.hubServiceGetLinksByFid(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetLinksByTargetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetLinksByTarget(requestParameters: HubServiceApiHubServiceGetLinksByTargetRequest, options?: AxiosRequestConfig): AxiosPromise<MessagesResponse> {
            return localVarFp.hubServiceGetLinksByTarget(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetOnChainEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetOnChainEvents(requestParameters: HubServiceApiHubServiceGetOnChainEventsRequest, options?: AxiosRequestConfig): AxiosPromise<OnChainEventResponse> {
            return localVarFp.hubServiceGetOnChainEvents(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary OnChain Events
         * @param {HubServiceApiHubServiceGetOnChainSignerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetOnChainSigner(requestParameters: HubServiceApiHubServiceGetOnChainSignerRequest, options?: AxiosRequestConfig): AxiosPromise<OnChainEvent> {
            return localVarFp.hubServiceGetOnChainSigner(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetOnChainSignersByFidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetOnChainSignersByFid(requestParameters: HubServiceApiHubServiceGetOnChainSignersByFidRequest, options?: AxiosRequestConfig): AxiosPromise<OnChainEventResponse> {
            return localVarFp.hubServiceGetOnChainSignersByFid(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary To be deprecated
         * @param {HubServiceApiHubServiceGetReactionsByCastRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetReactionsByCast(requestParameters: HubServiceApiHubServiceGetReactionsByCastRequest, options?: AxiosRequestConfig): AxiosPromise<MessagesResponse> {
            return localVarFp.hubServiceGetReactionsByCast(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetReactionsByFidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetReactionsByFid(requestParameters: HubServiceApiHubServiceGetReactionsByFidRequest, options?: AxiosRequestConfig): AxiosPromise<MessagesResponse> {
            return localVarFp.hubServiceGetReactionsByFid(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetReactionsByTargetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetReactionsByTarget(requestParameters: HubServiceApiHubServiceGetReactionsByTargetRequest, options?: AxiosRequestConfig): AxiosPromise<MessagesResponse> {
            return localVarFp.hubServiceGetReactionsByTarget(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetSyncMetadataByPrefixRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetSyncMetadataByPrefix(requestParameters: HubServiceApiHubServiceGetSyncMetadataByPrefixRequest, options?: AxiosRequestConfig): AxiosPromise<TrieNodeMetadataResponse> {
            return localVarFp.hubServiceGetSyncMetadataByPrefix(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetSyncSnapshotByPrefixRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetSyncSnapshotByPrefix(requestParameters: HubServiceApiHubServiceGetSyncSnapshotByPrefixRequest, options?: AxiosRequestConfig): AxiosPromise<TrieNodeSnapshotResponse> {
            return localVarFp.hubServiceGetSyncSnapshotByPrefix(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetSyncStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetSyncStatus(requestParameters: HubServiceApiHubServiceGetSyncStatusRequest, options?: AxiosRequestConfig): AxiosPromise<SyncStatusResponse> {
            return localVarFp.hubServiceGetSyncStatus(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary User Data
         * @param {HubServiceApiHubServiceGetUserDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetUserData(requestParameters: HubServiceApiHubServiceGetUserDataRequest, options?: AxiosRequestConfig): AxiosPromise<Message> {
            return localVarFp.hubServiceGetUserData(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetUserDataByFidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetUserDataByFid(requestParameters: HubServiceApiHubServiceGetUserDataByFidRequest, options?: AxiosRequestConfig): AxiosPromise<MessagesResponse> {
            return localVarFp.hubServiceGetUserDataByFid(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetUserNameProofsByFidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetUserNameProofsByFid(requestParameters: HubServiceApiHubServiceGetUserNameProofsByFidRequest, options?: AxiosRequestConfig): AxiosPromise<UsernameProofsResponse> {
            return localVarFp.hubServiceGetUserNameProofsByFid(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Username Proof
         * @param {HubServiceApiHubServiceGetUsernameProofRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetUsernameProof(requestParameters: HubServiceApiHubServiceGetUsernameProofRequest, options?: AxiosRequestConfig): AxiosPromise<UserNameProof> {
            return localVarFp.hubServiceGetUsernameProof(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verifications
         * @param {HubServiceApiHubServiceGetVerificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetVerification(requestParameters: HubServiceApiHubServiceGetVerificationRequest, options?: AxiosRequestConfig): AxiosPromise<Message> {
            return localVarFp.hubServiceGetVerification(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HubServiceApiHubServiceGetVerificationsByFidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetVerificationsByFid(requestParameters: HubServiceApiHubServiceGetVerificationsByFidRequest, options?: AxiosRequestConfig): AxiosPromise<MessagesResponse> {
            return localVarFp.hubServiceGetVerificationsByFid(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Submit Methods
         * @param {HubServiceApiHubServiceSubmitMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceSubmitMessage(requestParameters: HubServiceApiHubServiceSubmitMessageRequest, options?: AxiosRequestConfig): AxiosPromise<Message> {
            return localVarFp.hubServiceSubmitMessage(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Event Methods
         * @param {HubServiceApiHubServiceSubscribeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceSubscribe(requestParameters: HubServiceApiHubServiceSubscribeRequest, options?: AxiosRequestConfig): AxiosPromise<StreamResultOfHubEvent> {
            return localVarFp.hubServiceSubscribe(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for hubServiceGetAllLinkMessagesByFid operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetAllLinkMessagesByFidRequest
 */
export interface HubServiceApiHubServiceGetAllLinkMessagesByFidRequest {
    /**
     * 
     * @type {FidRequest}
     * @memberof HubServiceApiHubServiceGetAllLinkMessagesByFid
     */
    readonly body: FidRequest
}

/**
 * Request parameters for hubServiceGetAllMessagesBySyncIds operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetAllMessagesBySyncIdsRequest
 */
export interface HubServiceApiHubServiceGetAllMessagesBySyncIdsRequest {
    /**
     * 
     * @type {SyncIds}
     * @memberof HubServiceApiHubServiceGetAllMessagesBySyncIds
     */
    readonly body: SyncIds
}

/**
 * Request parameters for hubServiceGetAllReactionMessagesByFid operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetAllReactionMessagesByFidRequest
 */
export interface HubServiceApiHubServiceGetAllReactionMessagesByFidRequest {
    /**
     * 
     * @type {FidRequest}
     * @memberof HubServiceApiHubServiceGetAllReactionMessagesByFid
     */
    readonly body: FidRequest
}

/**
 * Request parameters for hubServiceGetAllSyncIdsByPrefix operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetAllSyncIdsByPrefixRequest
 */
export interface HubServiceApiHubServiceGetAllSyncIdsByPrefixRequest {
    /**
     * 
     * @type {TrieNodePrefix}
     * @memberof HubServiceApiHubServiceGetAllSyncIdsByPrefix
     */
    readonly body: TrieNodePrefix
}

/**
 * Request parameters for hubServiceGetAllUserDataMessagesByFid operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetAllUserDataMessagesByFidRequest
 */
export interface HubServiceApiHubServiceGetAllUserDataMessagesByFidRequest {
    /**
     * 
     * @type {FidRequest}
     * @memberof HubServiceApiHubServiceGetAllUserDataMessagesByFid
     */
    readonly body: FidRequest
}

/**
 * Request parameters for hubServiceGetAllVerificationMessagesByFid operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetAllVerificationMessagesByFidRequest
 */
export interface HubServiceApiHubServiceGetAllVerificationMessagesByFidRequest {
    /**
     * 
     * @type {FidRequest}
     * @memberof HubServiceApiHubServiceGetAllVerificationMessagesByFid
     */
    readonly body: FidRequest
}

/**
 * Request parameters for hubServiceGetCurrentStorageLimitsByFid operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetCurrentStorageLimitsByFidRequest
 */
export interface HubServiceApiHubServiceGetCurrentStorageLimitsByFidRequest {
    /**
     * 
     * @type {FidRequest}
     * @memberof HubServiceApiHubServiceGetCurrentStorageLimitsByFid
     */
    readonly body: FidRequest
}

/**
 * Request parameters for hubServiceGetEvent operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetEventRequest
 */
export interface HubServiceApiHubServiceGetEventRequest {
    /**
     * 
     * @type {EventRequest}
     * @memberof HubServiceApiHubServiceGetEvent
     */
    readonly body: EventRequest
}

/**
 * Request parameters for hubServiceGetFids operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetFidsRequest
 */
export interface HubServiceApiHubServiceGetFidsRequest {
    /**
     * 
     * @type {FidsRequest}
     * @memberof HubServiceApiHubServiceGetFids
     */
    readonly body: FidsRequest
}

/**
 * Request parameters for hubServiceGetIdRegistryOnChainEvent operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetIdRegistryOnChainEventRequest
 */
export interface HubServiceApiHubServiceGetIdRegistryOnChainEventRequest {
    /**
     * 
     * @type {FidRequest}
     * @memberof HubServiceApiHubServiceGetIdRegistryOnChainEvent
     */
    readonly body: FidRequest
}

/**
 * Request parameters for hubServiceGetIdRegistryOnChainEventByAddress operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetIdRegistryOnChainEventByAddressRequest
 */
export interface HubServiceApiHubServiceGetIdRegistryOnChainEventByAddressRequest {
    /**
     * 
     * @type {IdRegistryEventByAddressRequest}
     * @memberof HubServiceApiHubServiceGetIdRegistryOnChainEventByAddress
     */
    readonly body: IdRegistryEventByAddressRequest
}

/**
 * Request parameters for hubServiceGetLink operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetLinkRequest
 */
export interface HubServiceApiHubServiceGetLinkRequest {
    /**
     * 
     * @type {LinkRequest}
     * @memberof HubServiceApiHubServiceGetLink
     */
    readonly body: LinkRequest
}

/**
 * Request parameters for hubServiceGetLinksByFid operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetLinksByFidRequest
 */
export interface HubServiceApiHubServiceGetLinksByFidRequest {
    /**
     * 
     * @type {LinksByFidRequest}
     * @memberof HubServiceApiHubServiceGetLinksByFid
     */
    readonly body: LinksByFidRequest
}

/**
 * Request parameters for hubServiceGetLinksByTarget operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetLinksByTargetRequest
 */
export interface HubServiceApiHubServiceGetLinksByTargetRequest {
    /**
     * 
     * @type {LinksByTargetRequest}
     * @memberof HubServiceApiHubServiceGetLinksByTarget
     */
    readonly body: LinksByTargetRequest
}

/**
 * Request parameters for hubServiceGetOnChainEvents operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetOnChainEventsRequest
 */
export interface HubServiceApiHubServiceGetOnChainEventsRequest {
    /**
     * 
     * @type {OnChainEventRequest}
     * @memberof HubServiceApiHubServiceGetOnChainEvents
     */
    readonly body: OnChainEventRequest
}

/**
 * Request parameters for hubServiceGetOnChainSigner operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetOnChainSignerRequest
 */
export interface HubServiceApiHubServiceGetOnChainSignerRequest {
    /**
     * 
     * @type {SignerRequest}
     * @memberof HubServiceApiHubServiceGetOnChainSigner
     */
    readonly body: SignerRequest
}

/**
 * Request parameters for hubServiceGetOnChainSignersByFid operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetOnChainSignersByFidRequest
 */
export interface HubServiceApiHubServiceGetOnChainSignersByFidRequest {
    /**
     * 
     * @type {FidRequest}
     * @memberof HubServiceApiHubServiceGetOnChainSignersByFid
     */
    readonly body: FidRequest
}

/**
 * Request parameters for hubServiceGetReactionsByCast operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetReactionsByCastRequest
 */
export interface HubServiceApiHubServiceGetReactionsByCastRequest {
    /**
     * 
     * @type {ReactionsByTargetRequest}
     * @memberof HubServiceApiHubServiceGetReactionsByCast
     */
    readonly body: ReactionsByTargetRequest
}

/**
 * Request parameters for hubServiceGetReactionsByFid operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetReactionsByFidRequest
 */
export interface HubServiceApiHubServiceGetReactionsByFidRequest {
    /**
     * 
     * @type {ReactionsByFidRequest}
     * @memberof HubServiceApiHubServiceGetReactionsByFid
     */
    readonly body: ReactionsByFidRequest
}

/**
 * Request parameters for hubServiceGetReactionsByTarget operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetReactionsByTargetRequest
 */
export interface HubServiceApiHubServiceGetReactionsByTargetRequest {
    /**
     * 
     * @type {ReactionsByTargetRequest}
     * @memberof HubServiceApiHubServiceGetReactionsByTarget
     */
    readonly body: ReactionsByTargetRequest
}

/**
 * Request parameters for hubServiceGetSyncMetadataByPrefix operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetSyncMetadataByPrefixRequest
 */
export interface HubServiceApiHubServiceGetSyncMetadataByPrefixRequest {
    /**
     * 
     * @type {TrieNodePrefix}
     * @memberof HubServiceApiHubServiceGetSyncMetadataByPrefix
     */
    readonly body: TrieNodePrefix
}

/**
 * Request parameters for hubServiceGetSyncSnapshotByPrefix operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetSyncSnapshotByPrefixRequest
 */
export interface HubServiceApiHubServiceGetSyncSnapshotByPrefixRequest {
    /**
     * 
     * @type {TrieNodePrefix}
     * @memberof HubServiceApiHubServiceGetSyncSnapshotByPrefix
     */
    readonly body: TrieNodePrefix
}

/**
 * Request parameters for hubServiceGetSyncStatus operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetSyncStatusRequest
 */
export interface HubServiceApiHubServiceGetSyncStatusRequest {
    /**
     * 
     * @type {SyncStatusRequest}
     * @memberof HubServiceApiHubServiceGetSyncStatus
     */
    readonly body: SyncStatusRequest
}

/**
 * Request parameters for hubServiceGetUserData operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetUserDataRequest
 */
export interface HubServiceApiHubServiceGetUserDataRequest {
    /**
     * 
     * @type {UserDataRequest}
     * @memberof HubServiceApiHubServiceGetUserData
     */
    readonly body: UserDataRequest
}

/**
 * Request parameters for hubServiceGetUserDataByFid operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetUserDataByFidRequest
 */
export interface HubServiceApiHubServiceGetUserDataByFidRequest {
    /**
     * 
     * @type {FidRequest}
     * @memberof HubServiceApiHubServiceGetUserDataByFid
     */
    readonly body: FidRequest
}

/**
 * Request parameters for hubServiceGetUserNameProofsByFid operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetUserNameProofsByFidRequest
 */
export interface HubServiceApiHubServiceGetUserNameProofsByFidRequest {
    /**
     * 
     * @type {FidRequest}
     * @memberof HubServiceApiHubServiceGetUserNameProofsByFid
     */
    readonly body: FidRequest
}

/**
 * Request parameters for hubServiceGetUsernameProof operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetUsernameProofRequest
 */
export interface HubServiceApiHubServiceGetUsernameProofRequest {
    /**
     * 
     * @type {UsernameProofRequest}
     * @memberof HubServiceApiHubServiceGetUsernameProof
     */
    readonly body: UsernameProofRequest
}

/**
 * Request parameters for hubServiceGetVerification operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetVerificationRequest
 */
export interface HubServiceApiHubServiceGetVerificationRequest {
    /**
     * 
     * @type {VerificationRequest}
     * @memberof HubServiceApiHubServiceGetVerification
     */
    readonly body: VerificationRequest
}

/**
 * Request parameters for hubServiceGetVerificationsByFid operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceGetVerificationsByFidRequest
 */
export interface HubServiceApiHubServiceGetVerificationsByFidRequest {
    /**
     * 
     * @type {FidRequest}
     * @memberof HubServiceApiHubServiceGetVerificationsByFid
     */
    readonly body: FidRequest
}

/**
 * Request parameters for hubServiceSubmitMessage operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceSubmitMessageRequest
 */
export interface HubServiceApiHubServiceSubmitMessageRequest {
    /**
     * *  A Message is a delta operation on the Farcaster network. The message protobuf is an envelope  that wraps a MessageData object and contains a hash and signature which can verify its authenticity.
     * @type {Message}
     * @memberof HubServiceApiHubServiceSubmitMessage
     */
    readonly body: Message
}

/**
 * Request parameters for hubServiceSubscribe operation in HubServiceApi.
 * @export
 * @interface HubServiceApiHubServiceSubscribeRequest
 */
export interface HubServiceApiHubServiceSubscribeRequest {
    /**
     * 
     * @type {SubscribeRequest}
     * @memberof HubServiceApiHubServiceSubscribe
     */
    readonly body: SubscribeRequest
}

/**
 * HubServiceApi - object-oriented interface
 * @export
 * @class HubServiceApi
 * @extends {BaseAPI}
 */
export class HubServiceApi extends BaseAPI {
    /**
     * 
     * @param {HubServiceApiHubServiceGetAllLinkMessagesByFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetAllLinkMessagesByFid(requestParameters: HubServiceApiHubServiceGetAllLinkMessagesByFidRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetAllLinkMessagesByFid(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetAllMessagesBySyncIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetAllMessagesBySyncIds(requestParameters: HubServiceApiHubServiceGetAllMessagesBySyncIdsRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetAllMessagesBySyncIds(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetAllReactionMessagesByFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetAllReactionMessagesByFid(requestParameters: HubServiceApiHubServiceGetAllReactionMessagesByFidRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetAllReactionMessagesByFid(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetAllSyncIdsByPrefixRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetAllSyncIdsByPrefix(requestParameters: HubServiceApiHubServiceGetAllSyncIdsByPrefixRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetAllSyncIdsByPrefix(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetAllUserDataMessagesByFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetAllUserDataMessagesByFid(requestParameters: HubServiceApiHubServiceGetAllUserDataMessagesByFidRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetAllUserDataMessagesByFid(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetAllVerificationMessagesByFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetAllVerificationMessagesByFid(requestParameters: HubServiceApiHubServiceGetAllVerificationMessagesByFidRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetAllVerificationMessagesByFid(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetCurrentStorageLimitsByFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetCurrentStorageLimitsByFid(requestParameters: HubServiceApiHubServiceGetCurrentStorageLimitsByFidRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetCurrentStorageLimitsByFid(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetEvent(requestParameters: HubServiceApiHubServiceGetEventRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetEvent(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetFidsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetFids(requestParameters: HubServiceApiHubServiceGetFidsRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetFids(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetIdRegistryOnChainEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetIdRegistryOnChainEvent(requestParameters: HubServiceApiHubServiceGetIdRegistryOnChainEventRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetIdRegistryOnChainEvent(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetIdRegistryOnChainEventByAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetIdRegistryOnChainEventByAddress(requestParameters: HubServiceApiHubServiceGetIdRegistryOnChainEventByAddressRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetIdRegistryOnChainEventByAddress(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Links
     * @param {HubServiceApiHubServiceGetLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetLink(requestParameters: HubServiceApiHubServiceGetLinkRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetLink(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetLinksByFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetLinksByFid(requestParameters: HubServiceApiHubServiceGetLinksByFidRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetLinksByFid(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetLinksByTargetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetLinksByTarget(requestParameters: HubServiceApiHubServiceGetLinksByTargetRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetLinksByTarget(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetOnChainEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetOnChainEvents(requestParameters: HubServiceApiHubServiceGetOnChainEventsRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetOnChainEvents(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary OnChain Events
     * @param {HubServiceApiHubServiceGetOnChainSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetOnChainSigner(requestParameters: HubServiceApiHubServiceGetOnChainSignerRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetOnChainSigner(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetOnChainSignersByFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetOnChainSignersByFid(requestParameters: HubServiceApiHubServiceGetOnChainSignersByFidRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetOnChainSignersByFid(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary To be deprecated
     * @param {HubServiceApiHubServiceGetReactionsByCastRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetReactionsByCast(requestParameters: HubServiceApiHubServiceGetReactionsByCastRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetReactionsByCast(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetReactionsByFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetReactionsByFid(requestParameters: HubServiceApiHubServiceGetReactionsByFidRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetReactionsByFid(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetReactionsByTargetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetReactionsByTarget(requestParameters: HubServiceApiHubServiceGetReactionsByTargetRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetReactionsByTarget(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetSyncMetadataByPrefixRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetSyncMetadataByPrefix(requestParameters: HubServiceApiHubServiceGetSyncMetadataByPrefixRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetSyncMetadataByPrefix(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetSyncSnapshotByPrefixRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetSyncSnapshotByPrefix(requestParameters: HubServiceApiHubServiceGetSyncSnapshotByPrefixRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetSyncSnapshotByPrefix(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetSyncStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetSyncStatus(requestParameters: HubServiceApiHubServiceGetSyncStatusRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetSyncStatus(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary User Data
     * @param {HubServiceApiHubServiceGetUserDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetUserData(requestParameters: HubServiceApiHubServiceGetUserDataRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetUserData(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetUserDataByFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetUserDataByFid(requestParameters: HubServiceApiHubServiceGetUserDataByFidRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetUserDataByFid(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetUserNameProofsByFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetUserNameProofsByFid(requestParameters: HubServiceApiHubServiceGetUserNameProofsByFidRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetUserNameProofsByFid(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Username Proof
     * @param {HubServiceApiHubServiceGetUsernameProofRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetUsernameProof(requestParameters: HubServiceApiHubServiceGetUsernameProofRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetUsernameProof(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verifications
     * @param {HubServiceApiHubServiceGetVerificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetVerification(requestParameters: HubServiceApiHubServiceGetVerificationRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetVerification(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HubServiceApiHubServiceGetVerificationsByFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceGetVerificationsByFid(requestParameters: HubServiceApiHubServiceGetVerificationsByFidRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceGetVerificationsByFid(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Submit Methods
     * @param {HubServiceApiHubServiceSubmitMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceSubmitMessage(requestParameters: HubServiceApiHubServiceSubmitMessageRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceSubmitMessage(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Event Methods
     * @param {HubServiceApiHubServiceSubscribeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HubServiceApi
     */
    public hubServiceSubscribe(requestParameters: HubServiceApiHubServiceSubscribeRequest, options?: AxiosRequestConfig) {
        return HubServiceApiFp(this.configuration).hubServiceSubscribe(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
