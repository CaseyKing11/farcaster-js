/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster Hub REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CastId } from '../models';
// @ts-ignore
import { CastsByParentRequest } from '../models';
// @ts-ignore
import { FidRequest } from '../models';
// @ts-ignore
import { Message } from '../models';
// @ts-ignore
import { MessagesResponse } from '../models';
// @ts-ignore
import { RpcStatus } from '../models';
/**
 * CastsApi - axios parameter creator
 * @export
 */
export const CastsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Bulk Methods
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetAllCastMessagesByFid: async (body: FidRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetAllCastMessagesByFid', 'body', body)
            const localVarPath = `/HubService/GetAllCastMessagesByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Casts
         * @param {CastId} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetCast: async (body: CastId, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetCast', 'body', body)
            const localVarPath = `/HubService/GetCast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetCastsByFid: async (body: FidRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetCastsByFid', 'body', body)
            const localVarPath = `/HubService/GetCastsByFid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetCastsByMention: async (body: FidRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetCastsByMention', 'body', body)
            const localVarPath = `/HubService/GetCastsByMention`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CastsByParentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetCastsByParent: async (body: CastsByParentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('hubServiceGetCastsByParent', 'body', body)
            const localVarPath = `/HubService/GetCastsByParent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CastsApi - functional programming interface
 * @export
 */
export const CastsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CastsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Bulk Methods
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetAllCastMessagesByFid(body: FidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetAllCastMessagesByFid(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Casts
         * @param {CastId} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetCast(body: CastId, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetCast(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetCastsByFid(body: FidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetCastsByFid(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetCastsByMention(body: FidRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetCastsByMention(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CastsByParentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hubServiceGetCastsByParent(body: CastsByParentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hubServiceGetCastsByParent(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CastsApi - factory interface
 * @export
 */
export const CastsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CastsApiFp(configuration)
    return {
        /**
         * 
         * @summary Bulk Methods
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetAllCastMessagesByFid(body: FidRequest, options?: any): AxiosPromise<MessagesResponse> {
            return localVarFp.hubServiceGetAllCastMessagesByFid(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Casts
         * @param {CastId} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetCast(body: CastId, options?: any): AxiosPromise<Message> {
            return localVarFp.hubServiceGetCast(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetCastsByFid(body: FidRequest, options?: any): AxiosPromise<MessagesResponse> {
            return localVarFp.hubServiceGetCastsByFid(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FidRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetCastsByMention(body: FidRequest, options?: any): AxiosPromise<MessagesResponse> {
            return localVarFp.hubServiceGetCastsByMention(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CastsByParentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hubServiceGetCastsByParent(body: CastsByParentRequest, options?: any): AxiosPromise<MessagesResponse> {
            return localVarFp.hubServiceGetCastsByParent(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CastsApi - object-oriented interface
 * @export
 * @class CastsApi
 * @extends {BaseAPI}
 */
export class CastsApi extends BaseAPI {
    /**
     * 
     * @summary Bulk Methods
     * @param {FidRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastsApi
     */
    public hubServiceGetAllCastMessagesByFid(body: FidRequest, options?: AxiosRequestConfig) {
        return CastsApiFp(this.configuration).hubServiceGetAllCastMessagesByFid(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Casts
     * @param {CastId} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastsApi
     */
    public hubServiceGetCast(body: CastId, options?: AxiosRequestConfig) {
        return CastsApiFp(this.configuration).hubServiceGetCast(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FidRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastsApi
     */
    public hubServiceGetCastsByFid(body: FidRequest, options?: AxiosRequestConfig) {
        return CastsApiFp(this.configuration).hubServiceGetCastsByFid(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FidRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastsApi
     */
    public hubServiceGetCastsByMention(body: FidRequest, options?: AxiosRequestConfig) {
        return CastsApiFp(this.configuration).hubServiceGetCastsByMention(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CastsByParentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastsApi
     */
    public hubServiceGetCastsByParent(body: CastsByParentRequest, options?: AxiosRequestConfig) {
        return CastsApiFp(this.configuration).hubServiceGetCastsByParent(body, options).then((request) => request(this.axios, this.basePath));
    }
}
